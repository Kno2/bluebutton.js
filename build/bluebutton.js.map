{"version":3,"sources":["webpack:///webpack/bootstrap dd09f1b08a6b10389652","webpack:///./lib/core.js","webpack:///./lib/parsers/generic.js","webpack:///./lib/parsers/ccda/demographics.js","webpack:///./lib/core/common.js","webpack:///./lib/parsers/ccdar2/health_concerns.js","webpack:///./lib/bluebutton.js","webpack:///./lib/core/codes.js","webpack:///./lib/core/xml.js","webpack:///external \"xmldom\"","webpack:///./lib/documents.js","webpack:///./lib/documents/c32.js","webpack:///./lib/documents/ccd.js","webpack:///./lib/documents/ccda.js","webpack:///./lib/documents/ccdar2.js","webpack:///./lib/generators.js","webpack:///./lib/generators/c32.js","webpack:///./lib/generators/ccda.js","webpack:///external \"lodash\"","webpack:///./lib/parsers.js","webpack:///./lib/parsers/c32.js","webpack:///./lib/parsers/c32/allergies.js","webpack:///./lib/parsers/c32/demographics.js","webpack:///./lib/parsers/c32/document.js","webpack:///./lib/parsers/c32/encounters.js","webpack:///./lib/parsers/c32/immunizations.js","webpack:///./lib/parsers/c32/medications.js","webpack:///./lib/parsers/c32/problems.js","webpack:///./lib/parsers/c32/procedures.js","webpack:///./lib/parsers/c32/results.js","webpack:///./lib/parsers/c32/vitals.js","webpack:///./lib/parsers/ccd.js","webpack:///./lib/parsers/ccd/document.js","webpack:///./lib/parsers/ccda.js","webpack:///./lib/parsers/ccda/allergies.js","webpack:///./lib/parsers/ccda/care_plan.js","webpack:///./lib/parsers/ccda/document.js","webpack:///./lib/parsers/ccda/encounters.js","webpack:///./lib/parsers/ccda/free_text.js","webpack:///./lib/parsers/ccda/functional_statuses.js","webpack:///./lib/parsers/ccda/immunizations.js","webpack:///./lib/parsers/ccda/instructions.js","webpack:///./lib/parsers/ccda/medications.js","webpack:///./lib/parsers/ccda/problems.js","webpack:///./lib/parsers/ccda/procedures.js","webpack:///./lib/parsers/ccda/results.js","webpack:///./lib/parsers/ccda/smoking_status.js","webpack:///./lib/parsers/ccda/vitals.js","webpack:///./lib/parsers/ccdar2.js","webpack:///./lib/parsers/ccdar2/document.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI;AACJ;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC9EA;AACA;AACA;;AAEA;AACA;AACA,KAAK,kBAAkB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpIA;;AAEA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,E;;;;;;ACtDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;ACzGA;AACA;AACA;;AAEA;AACA,eAAe,YAAY;AAC3B;AACA,E;;;;;;ACPA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA,sBAAsB;AACtB;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;;AAEA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;;AAET;AACA,M;AACA,C;;;;;;;ACtFA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChFA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxuCAAuC,YAAY;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvgBA;AACA;AACA;AACA,KAAK,kBAAkB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,WAAW,UAAU;AACrB,wBAAwB;AACxB,wBAAwB;AACxB,yBAAyB;AACzB,0BAA0B;AAC1B,0BAA0B;AAC1B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,0DAA0D,aAAa;AACvE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;ACxUA,mC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA,cAAc,iBAAiB;AAC/B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,gBAAgB;AACjC;AACA,cAAc,kBAAkB;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClMA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC5FA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AClDA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,I;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,I;AACA;;;;;;;AC9GA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AClDA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,2BAA2B;AAC7E;AACA,sCAAsC,YAAY;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC,kCAAkC;AAClC,mCAAmC;AACnC,oCAAoC;AACpC,oCAAoC;AACpC;;AAEA;AACA,iBAAiB,WAAW;;AAE5B;AACA;AACA,qBAAqB,qDAAqD;;AAE1E;AACA;AACA,8BAA8B,gEAAgE;AAC9F,mCAAmC;AACnC,qFAAqF;AACrF,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;AClKH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACfA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,E;;;;;;ACpCA,mC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACnBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;AC3FA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK,E;AACL;AACA;AACA;;;;;;;ACpHA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uB;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACtGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;ACpJA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;;;;;;AC9FA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B,mBAAmB;;AAEhD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9HA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;;;;;;ACxMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;;;;;;AClFA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;AC/EA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,kBAAkB;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA,I;AACA,C;;;;;;AC3HA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,oBAAoB;AACzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;AChEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;AC9BA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;ACtFA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;AC5GA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,sC;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;AChEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;AChJA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;AC3FA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,iD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACrBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,KAAK;;AAEL;AACA,I;AACA,C;;;;;;ACzCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,wC;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;;AAEhD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5HA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;ACrCA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;;;;;;ACzLA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;;;;;;AC7EA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;AC9EA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,kBAAkB;AACvC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;AC/GA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,I;AACA,C;;;;;;AC9DA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,oBAAoB;AACzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;AC7DA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;AC/BA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mC;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C","file":"bluebutton.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dd09f1b08a6b10389652","/*\r\n * ...\r\n */\r\n\r\nvar Codes = require('./core/codes');\r\nvar XML = require('./core/xml');\r\nvar { stripWhitespace } = require('./core/common');\r\n\r\n/* exported Core */\r\nmodule.exports = {\r\n  parseData: parseData,\r\n  stripWhitespace: stripWhitespace,\r\n  json: json,\r\n  trim: trim,\r\n  Codes: Codes,\r\n  XML: XML\r\n};\r\n/*\r\n  * ...\r\n  */\r\nfunction parseData(source) {\r\n  source = stripWhitespace(source);\r\n  \r\n  if (source.charAt(0) === '<') {\r\n    try {\r\n      return XML.parse(source);\r\n    } catch (e) {\r\n      if (console.log) {\r\n        console.log(\"File looked like it might be XML but couldn't be parsed.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(source);\r\n  } catch (e) {\r\n    if (console.error) {\r\n      console.error(\"Error: Cannot parse this file. BB.js only accepts valid XML \" +\r\n        \"(for parsing) or JSON (for generation). If you are attempting to provide \" +\r\n        \"XML or JSON, please run your data through a validator to see if it is malformed.\\n\");\r\n    }\r\n    throw e;\r\n  }\r\n};\r\n\r\n/*\r\n  * A wrapper around JSON.stringify which allows us to produce customized JSON.\r\n  *\r\n  * See https://developer.mozilla.org/en-US/docs/Web/\r\n  *        JavaScript/Guide/Using_native_JSON#The_replacer_parameter\r\n  * for documentation on the replacerFn.\r\n  */\r\nfunction json() {\r\n\r\n  var datePad = function(number) {\r\n    if (number < 10) {\r\n      return '0' + number;\r\n    }\r\n    return number;\r\n  };\r\n  \r\n  var replacerFn = function(key, value) {\r\n    /* By default, Dates are output as ISO Strings like \"2014-01-03T08:00:00.000Z.\" This is\r\n      * tricky when all we have is a date (not a datetime); JS sadly ignores that distinction.\r\n      *\r\n      * To paper over this JS wart, we use two different JSON formats for dates and datetimes.\r\n      * This is a little ugly but makes sure that the dates/datetimes mostly just parse\r\n      * correclty for clients:\r\n      *\r\n      * 1. Datetimes are rendered as standard ISO strings, without the misleading millisecond\r\n      *    precision (misleading because we don't have it): YYYY-MM-DDTHH:mm:ssZ\r\n      * 2. Dates are rendered as MM/DD/YYYY. This ensures they are parsed as midnight local-time,\r\n      *    no matter what local time is, and therefore ensures the date is always correct.\r\n      *    Outputting \"YYYY-MM-DD\" would lead most browsers/node to assume midnight UTC, which\r\n      *    means \"2014-04-27\" suddenly turns into \"04/26/2014 at 5PM\" or just \"04/26/2014\"\r\n      *    if you format it as a date...\r\n      *\r\n      * See http://stackoverflow.com/questions/2587345/javascript-date-parse and\r\n      *     http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html\r\n      * for more on this issue.\r\n      */\r\n    var originalValue = this[key]; // a Date\r\n\r\n    if ( value && (originalValue instanceof Date) && !isNaN(originalValue.getTime()) ) {\r\n\r\n      // If while parsing we indicated that there was time-data specified, or if we see\r\n      // non-zero values in the hour/minutes/seconds/millis fields, output a datetime.\r\n      if (originalValue._parsedWithTimeData ||\r\n          originalValue.getHours() || originalValue.getMinutes() ||\r\n          originalValue.getSeconds() || originalValue.getMilliseconds()) {\r\n\r\n        // Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/\r\n        //    Reference/Global_Objects/Date/toISOString\r\n        return originalValue.getUTCFullYear() +\r\n          '-' + datePad( originalValue.getUTCMonth() + 1 ) +\r\n          '-' + datePad( originalValue.getUTCDate() ) +\r\n          'T' + datePad( originalValue.getUTCHours() ) +\r\n          ':' + datePad( originalValue.getUTCMinutes() ) +\r\n          ':' + datePad( originalValue.getUTCSeconds() ) +\r\n          'Z';\r\n      }\r\n      \r\n      // We just have a pure date\r\n      return datePad( originalValue.getMonth() + 1 ) +\r\n        '/' + datePad( originalValue.getDate() ) +\r\n        '/' + originalValue.getFullYear();\r\n\r\n    }\r\n\r\n    return value;\r\n  };\r\n  \r\n  return JSON.stringify(this, replacerFn, 2);\r\n};\r\n\r\n\r\n/*\r\n  * Removes all `null` properties from an object.\r\n  */\r\nfunction trim(o) {\r\n  var y;\r\n  for (var x in o) {\r\n    if (o.hasOwnProperty(x)) {\r\n      y = o[x];\r\n      // if (y === null || (y instanceof Object && Object.keys(y).length == 0)) {\r\n      if (y === null) {\r\n        delete o[x];\r\n      }\r\n      if (y instanceof Object) y = trim(y);\r\n    }\r\n  }\r\n  return o;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core.js\n// module id = 0\n// module chunks = 0","/* Parses out basic data about each section */\r\n\r\nmodule.exports = function (ccda, data) {\r\n\r\n    var each = function (callback) {\r\n        for (var i = 0; i < this.length; i++) {\r\n            callback(this[i]);\r\n        }\r\n    };\r\n\r\n    var containsTemplateId = function(templateId, data) {\r\n        for (var property in data) {\r\n            if (data.hasOwnProperty(property)) {\r\n                var p = data[property].templateId;\r\n                //var display = this[property].displayName;\r\n                if(p) {\r\n                    if(p === templateId) {\r\n                        //console.log(\"TemplateId Match \" + templateId + \" \" + display);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    var allSections = ccda.elsByTag('section');\r\n    allSections.each = each;\r\n\r\n    allSections.each(function(s) {\r\n\r\n        var code = s.tag('code').attr('displayName');\r\n        var templateId =  s.tag('templateId').attr('root');\r\n\r\n        var existingTemplateId = containsTemplateId(templateId, data);\r\n\r\n        if (code) {\r\n            var nodeName = code.split(' ').join('_').toLowerCase();\r\n\r\n            //console.log(\"NODE NAME \" + nodeName);\r\n\r\n            if (!data[nodeName] && !existingTemplateId) {\r\n                //console.log(\"CREATE NODE \" + code);\r\n                data[nodeName] = {};\r\n            }\r\n\r\n            if(data[nodeName]) {\r\n                data[nodeName].displayName = code;\r\n                data[nodeName].templateId = templateId;\r\n                data[nodeName].text = s.tag('text').val(true);\r\n            }\r\n\r\n        }\r\n    });\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/generic.js\n// module id = 1\n// module chunks = 0","/*\r\n * Parser for the CCDA demographics section\r\n */\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.demographics = demographics;\r\n\r\n  function demographics(ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var data = {}, el;\r\n    \r\n    var demographics = ccda.section('demographics');\r\n    \r\n    var patient = demographics.tag('patientRole');\r\n    el = patient.tag('patient').tag('name');\r\n    var patient_name_dict = parseName(el);\r\n    \r\n    el = patient.tag('patient');\r\n    var dob = parseDate(el.tag('birthTime').attr('value')),\r\n        gender = Core.Codes.gender(el.tag('administrativeGenderCode').attr('code')),\r\n        marital_status = Core.Codes.maritalStatus(el.tag('maritalStatusCode').attr('code'));\r\n    \r\n    el = patient.tag('addr');\r\n    var patient_address_dict = parseAddress(el);\r\n    \r\n    el = patient.tag('telecom');\r\n    var home = el.attr('value'),\r\n        work = null,\r\n        mobile = null;\r\n    \r\n    var email = null;\r\n    \r\n    var language = patient.tag('languageCommunication').tag('languageCode').attr('code'),\r\n        race = patient.tag('raceCode').attr('displayName'),\r\n        ethnicity = patient.tag('ethnicGroupCode').attr('displayName'),\r\n        religion = patient.tag('religiousAffiliationCode').attr('displayName');\r\n    \r\n    el = patient.tag('birthplace');\r\n    var birthplace_dict = parseAddress(el);\r\n    \r\n    el = patient.tag('guardian');\r\n    var guardian_relationship = el.tag('code').attr('displayName'),\r\n        guardian_relationship_code = el.tag('code').attr('code'),\r\n        guardian_home = el.tag('telecom').attr('value');\r\n    \r\n    el = el.tag('guardianPerson').tag('name');\r\n    var guardian_name_dict = parseName(el);\r\n    \r\n    el = patient.tag('guardian').tag('addr');\r\n    var guardian_address_dict = parseAddress(el);\r\n    \r\n    el = patient.tag('providerOrganization');\r\n    var provider_organization = el.tag('name').val(),\r\n        provider_phone = el.tag('telecom').attr('value');\r\n    \r\n    var provider_address_dict = parseAddress(el.tag('addr'));\r\n    \r\n    data = {\r\n      name: patient_name_dict,\r\n      dob: dob,\r\n      gender: gender,\r\n      marital_status: marital_status,\r\n      address: patient_address_dict,\r\n      phone: {\r\n        home: home,\r\n        work: work,\r\n        mobile: mobile\r\n      },\r\n      email: email,\r\n      language: language,\r\n      race: race,\r\n      ethnicity: ethnicity,\r\n      religion: religion,\r\n      birthplace: {\r\n        state: birthplace_dict.state,\r\n        zip: birthplace_dict.zip,\r\n        country: birthplace_dict.country\r\n      },\r\n      guardian: {\r\n        name: {\r\n          given: guardian_name_dict.given,\r\n          family: guardian_name_dict.family\r\n        },\r\n        relationship: guardian_relationship,\r\n        relationship_code: guardian_relationship_code,\r\n        address: guardian_address_dict,\r\n        phone: {\r\n          home: guardian_home\r\n        }\r\n      },\r\n      provider: {\r\n        organization: provider_organization,\r\n        phone: provider_phone,\r\n        address: provider_address_dict\r\n      }\r\n    };\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/demographics.js\n// module id = 2\n// module chunks = 0","module.exports = {\r\n  stripWhitespace: stripWhitespace\r\n}\r\n\r\nfunction stripWhitespace (str) {\r\n    if (!str) { return str; }\r\n    return str.replace(/^\\s+|\\s+$/g,'');\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/common.js\n// module id = 3\n// module chunks = 0","/*\r\n * Parser for the CCDAR2 Health Concerns Section\r\n * 2.16.840.1.113883.10.20.22.2.58\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n    var self = this;\r\n    self.doc = doc;\r\n\r\n    self.health_concerns_document = function (ccda) {\r\n        var parseDate = self.doc.parseDate;\r\n        var parseName = self.doc.parseName;\r\n        var parseAddress = self.doc.parseAddress;\r\n    \r\n        // Helper to create each iterator for collection\r\n        var each = function (callback) {\r\n            for (var i = 0; i < this.length; i++) {\r\n                callback(this[i]);\r\n            }\r\n        };\r\n    \r\n        var model = {}, el;\r\n        model.entries = [];\r\n    \r\n        model.text = ccda.tag('text').val(true);\r\n    \r\n        var health_concerns = ccda.section('health_concerns_document');\r\n        var title = health_concerns.tag('title').val();\r\n    \r\n        health_concerns.entries().each(function(entry) {\r\n    \r\n            var entryModel = {};\r\n            // Parse out the ACT Body\r\n            //A record of something that is being done, has been done, can be done, or is intended or requested to be done.\r\n            var act = entry.tag('act');\r\n            var er = act.elsByTag('entryRelationship');\r\n            var templateId = act.tag('templateId').attr('root');\r\n            var id = act.tag('id').attr('root');\r\n            var statusCode = act.tag('statusCode').attr('code');\r\n            var code = act.tag('code');\r\n            var name = code.attr('displayName');\r\n            var effectiveTime = parseDate(entry.tag('effectiveTime'));\r\n    \r\n            // The model we want to return in json\r\n            var actModel = {\r\n                effective_time: effectiveTime,\r\n                name: name,\r\n                entry_relationship:[]\r\n            };\r\n    \r\n            // Parse Entity Relationship child nodes\r\n    \r\n            var ers = entry.elsByTag('entryRelationship');\r\n            ers.each = each;\r\n    \r\n            ers.each(function(er){\r\n    \r\n                var erModel = {\r\n                    type_code : er.attr('typeCode'),\r\n                    observations : []\r\n                };\r\n    \r\n                var obs = er.elsByTag('observation');\r\n                obs.each = each;\r\n    \r\n                // Parse out Obsevations for Each ER\r\n                obs.each(function(ob) {\r\n                    erModel.observations.push({\r\n                        class_code: ob.attr('classCode'),\r\n                        mood_code: ob.attr('moodCode'),\r\n                        display_name : ob.tag('value').attr('displayName'),\r\n                        status: ob.tag('statusCode').attr('code')\r\n                    });\r\n                });\r\n    \r\n                actModel.entry_relationship.push(erModel);\r\n    \r\n            });\r\n    \r\n            // Add ACT Model to our final return model\r\n            entryModel['act'] = actModel;\r\n            model.entries.push(entryModel);\r\n        });\r\n    \r\n        return model;\r\n    };    \r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccdar2/health_concerns.js\n// module id = 4\n// module chunks = 0","'use strict';\r\n/*\r\n * ...\r\n */\r\n\r\nvar Core = require('./core');\r\n\r\nvar Documents = require('./documents');\r\n\r\nvar Generators = require('./generators');\r\n\r\nvar Parsers = require('./parsers');\r\n\r\n\r\n/* exported BlueButton */\r\nmodule.exports = function (source, opts) {\r\n  var type, parsedData, parsedDocument;\r\n  \r\n  // Look for options\r\n  if (!opts) opts = {};\r\n  \r\n  // Detect and parse the source data\r\n  parsedData = Core.parseData(source);\r\n  \r\n  // Detect and parse the document\r\n  if (opts.parser) {\r\n    \r\n    // TODO: parse the document with provided custom parser\r\n    parsedDocument = opts.parser();\r\n    \r\n  } else {\r\n    var documents = new Documents();\r\n    type = documents.detect(parsedData);\r\n    var parsers = new Parsers(documents);\r\n    switch (type) {\r\n      case 'c32':\r\n        parsedData = documents.C32.process(parsedData);\r\n        parsedDocument = parsers.C32.run(parsedData);\r\n        break;\r\n      case 'ccda':\r\n        parsedData = documents.CCDA.process(parsedData);\r\n        parsedDocument = parsers.CCDA.run(parsedData);\r\n        break;\r\n      case 'ccdar2':\r\n        parsedData = documents.CCDAR2.process(parsedData);\r\n        parsedDocument = parsers.CCDAR2.run(parsedData);\r\n        break;\r\n      case 'ccd':\r\n        parsedData = documents.CCD.process(parsedData);\r\n        parsedDocument = parsers.CCD.run(parsedData);\r\n        break;\r\n      case 'json':\r\n        /* Expects a call like:\r\n         * BlueButton(json string, {\r\n         *   generatorType: 'ccda',\r\n         *   template: < EJS file contents >\r\n         * })\r\n         * The returned \"type\" will be the requested type (not \"json\")\r\n         * and the XML will be turned as a string in the 'data' key\r\n         */\r\n        switch (opts.generatorType) {\r\n          // only the unit tests ever need to worry about this testingMode argument\r\n          case 'c32':\r\n            type = 'c32';\r\n            parsedDocument = Generators.C32.run(parsedData, opts.template, opts.testingMode);\r\n            break;\r\n          case 'ccda':\r\n            type = 'ccda';\r\n            parsedDocument = Generators.CCDA.run(parsedData, opts.template, opts.testingMode);\r\n            break;\r\n        }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    type: type,\r\n    data: parsedDocument,\r\n    source: parsedData\r\n  };\r\n\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bluebutton.js\n// module id = 5\n// module chunks = 0","/*\r\n * ...\r\n */\r\n\r\n\r\n  \r\n/*\r\n  * Administrative Gender (HL7 V3)\r\n  * http://phinvads.cdc.gov/vads/ViewValueSet.action?id=8DE75E17-176B-DE11-9B52-0015173D1785\r\n  * OID: 2.16.840.1.113883.1.11.1\r\n  */\r\nvar GENDER_MAP = {\r\n  'F': 'female',\r\n  'M': 'male',\r\n  'UN': 'undifferentiated'\r\n};\r\n\r\n/*\r\n  * Marital Status (HL7)\r\n  * http://phinvads.cdc.gov/vads/ViewValueSet.action?id=46D34BBC-617F-DD11-B38D-00188B398520\r\n  * OID: 2.16.840.1.114222.4.11.809\r\n  */\r\nvar MARITAL_STATUS_MAP = {\r\n  'N': 'annulled',\r\n  'C': 'common law',\r\n  'D': 'divorced',\r\n  'P': 'domestic partner',\r\n  'I': 'interlocutory',\r\n  'E': 'legally separated',\r\n  'G': 'living together',\r\n  'M': 'married',\r\n  'O': 'other',\r\n  'R': 'registered domestic partner',\r\n  'A': 'separated',\r\n  'S': 'single',\r\n  'U': 'unknown',\r\n  'B': 'unmarried',\r\n  'T': 'unreported',\r\n  'W': 'widowed'\r\n};\r\n\r\n/*\r\n  * Religious Affiliation (HL7 V3)\r\n  * https://phinvads.cdc.gov/vads/ViewValueSet.action?id=6BFDBFB5-A277-DE11-9B52-0015173D1785\r\n  * OID: 2.16.840.1.113883.5.1076\r\n  */\r\nvar RELIGION_MAP = {\r\n  \"1001\": \"adventist\",\r\n  \"1002\": \"african religions\",\r\n  \"1003\": \"afro-caribbean religions\",\r\n  \"1004\": \"agnosticism\",\r\n  \"1005\": \"anglican\",\r\n  \"1006\": \"animism\",\r\n  \"1061\": \"assembly of god\",\r\n  \"1007\": \"atheism\",\r\n  \"1008\": \"babi & baha'i faiths\",\r\n  \"1009\": \"baptist\",\r\n  \"1010\": \"bon\",\r\n  \"1062\": \"brethren\",\r\n  \"1011\": \"cao dai\",\r\n  \"1012\": \"celticism\",\r\n  \"1013\": \"christian (non-catholic, non-specific)\",\r\n  \"1063\": \"christian scientist\",\r\n  \"1064\": \"church of christ\",\r\n  \"1065\": \"church of god\",\r\n  \"1014\": \"confucianism\",\r\n  \"1066\": \"congregational\",\r\n  \"1015\": \"cyberculture religions\",\r\n  \"1067\": \"disciples of christ\",\r\n  \"1016\": \"divination\",\r\n  \"1068\": \"eastern orthodox\",\r\n  \"1069\": \"episcopalian\",\r\n  \"1070\": \"evangelical covenant\",\r\n  \"1017\": \"fourth way\",\r\n  \"1018\": \"free daism\",\r\n  \"1071\": \"friends\",\r\n  \"1072\": \"full gospel\",\r\n  \"1019\": \"gnosis\",\r\n  \"1020\": \"hinduism\",\r\n  \"1021\": \"humanism\",\r\n  \"1022\": \"independent\",\r\n  \"1023\": \"islam\",\r\n  \"1024\": \"jainism\",\r\n  \"1025\": \"jehovah's witnesses\",\r\n  \"1026\": \"judaism\",\r\n  \"1027\": \"latter day saints\",\r\n  \"1028\": \"lutheran\",\r\n  \"1029\": \"mahayana\",\r\n  \"1030\": \"meditation\",\r\n  \"1031\": \"messianic judaism\",\r\n  \"1073\": \"methodist\",\r\n  \"1032\": \"mitraism\",\r\n  \"1074\": \"native american\",\r\n  \"1075\": \"nazarene\",\r\n  \"1033\": \"new age\",\r\n  \"1034\": \"non-roman catholic\",\r\n  \"1035\": \"occult\",\r\n  \"1036\": \"orthodox\",\r\n  \"1037\": \"paganism\",\r\n  \"1038\": \"pentecostal\",\r\n  \"1076\": \"presbyterian\",\r\n  \"1039\": \"process, the\",\r\n  \"1077\": \"protestant\",\r\n  \"1078\": \"protestant, no denomination\",\r\n  \"1079\": \"reformed\",\r\n  \"1040\": \"reformed/presbyterian\",\r\n  \"1041\": \"roman catholic church\",\r\n  \"1080\": \"salvation army\",\r\n  \"1042\": \"satanism\",\r\n  \"1043\": \"scientology\",\r\n  \"1044\": \"shamanism\",\r\n  \"1045\": \"shiite (islam)\",\r\n  \"1046\": \"shinto\",\r\n  \"1047\": \"sikism\",\r\n  \"1048\": \"spiritualism\",\r\n  \"1049\": \"sunni (islam)\",\r\n  \"1050\": \"taoism\",\r\n  \"1051\": \"theravada\",\r\n  \"1081\": \"unitarian universalist\",\r\n  \"1052\": \"unitarian-universalism\",\r\n  \"1082\": \"united church of christ\",\r\n  \"1053\": \"universal life church\",\r\n  \"1054\": \"vajrayana (tibetan)\",\r\n  \"1055\": \"veda\",\r\n  \"1056\": \"voodoo\",\r\n  \"1057\": \"wicca\",\r\n  \"1058\": \"yaohushua\",\r\n  \"1059\": \"zen buddhism\",\r\n  \"1060\": \"zoroastrianism\"\r\n};\r\n\r\n/*\r\n  * Race & Ethnicity (HL7 V3)\r\n  * Full list at http://phinvads.cdc.gov/vads/ViewCodeSystem.action?id=2.16.840.1.113883.6.238\r\n  * OID: 2.16.840.1.113883.6.238\r\n  *\r\n  * Abbreviated list closer to real usage at: (Race / Ethnicity)\r\n  * https://phinvads.cdc.gov/vads/ViewValueSet.action?id=67D34BBC-617F-DD11-B38D-00188B398520\r\n  * https://phinvads.cdc.gov/vads/ViewValueSet.action?id=35D34BBC-617F-DD11-B38D-00188B398520\r\n  */\r\nvar RACE_ETHNICITY_MAP = {\r\n  '2028-9': 'asian',\r\n  '2054-5': 'black or african american',\r\n  '2135-2': 'hispanic or latino',\r\n  '2076-8': 'native',\r\n  '2186-5': 'not hispanic or latino',\r\n  '2131-1': 'other',\r\n  '2106-3': 'white'\r\n};\r\n\r\n/*\r\n  * Role (HL7 V3)\r\n  * https://phinvads.cdc.gov/vads/ViewCodeSystem.action?id=2.16.840.1.113883.5.111\r\n  * OID: 2.16.840.1.113883.5.111\r\n  */\r\nvar ROLE_MAP = {\r\n  \"ACC\": \"accident site\",\r\n  \"ACHFID\":  \"accreditation location identifier\",\r\n  \"ACTMIL\":  \"active duty military\",\r\n  \"ALL\": \"allergy clinic\",\r\n  \"AMB\": \"ambulance\",\r\n  \"AMPUT\":   \"amputee clinic\",\r\n  \"ANTIBIOT\":    \"antibiotic\",\r\n  \"ASSIST\":  \"assistive non-person living subject\",\r\n  \"AUNT\":    \"aunt\",\r\n  \"B\":   \"blind\",\r\n  \"BF\":  \"beef\",\r\n  \"BILL\":    \"billing contact\",\r\n  \"BIOTH\":   \"biotherapeutic non-person living subject\",\r\n  \"BL\":  \"broiler\",\r\n  \"BMTC\":    \"bone marrow transplant clinic\",\r\n  \"BMTU\":    \"bone marrow transplant unit\",\r\n  \"BR\":  \"breeder\",\r\n  \"BREAST\":  \"breast clinic\",\r\n  \"BRO\": \"brother\",\r\n  \"BROINLAW\":    \"brother-in-law\",\r\n  \"C\":   \"calibrator\",\r\n  \"CANC\": \"child and adolescent neurology clinic\",\r\n  \"CAPC\": \"child and adolescent psychiatry clinic\",\r\n  \"CARD\": \"ambulatory health care facilities; clinic/center; rehabilitation: cardiac facilities\",\r\n  \"CAS\": \"asylum seeker\",\r\n  \"CASM\":    \"single minor asylum seeker\",\r\n  \"CATH\":    \"cardiac catheterization lab\",\r\n  \"CCO\": \"clinical companion\",\r\n  \"CCU\": \"coronary care unit\",\r\n  \"CHEST\":   \"chest unit\",\r\n  \"CHILD\":   \"child\",\r\n  \"CHLDADOPT\":   \"adopted child\",\r\n  \"CHLDFOST\":    \"foster child\",\r\n  \"CHLDINLAW\":   \"child in-law\",\r\n  \"CHR\": \"chronic care facility\",\r\n  \"CLAIM\":   \"claimant\",\r\n  \"CN\":  \"national\",\r\n  \"CNRP\":    \"non-country member without residence permit\",\r\n  \"CNRPM\":   \"non-country member minor without residence permit\",\r\n  \"CO\":  \"companion\",\r\n  \"COAG\":    \"coagulation clinic\",\r\n  \"COCBEN\":  \"continuity of coverage beneficiary\",\r\n  \"COMM\":    \"community location\",\r\n  \"COMMUNITYLABORATORY\": \"community laboratory\",\r\n  \"COUSN\":   \"cousin\",\r\n  \"CPCA\":    \"permit card applicant\",\r\n  \"CRIMEVIC\":    \"crime victim\",\r\n  \"CRP\": \"non-country member with residence permit\",\r\n  \"CRPM\":    \"non-country member minor with residence permit\",\r\n  \"CRS\": \"colon and rectal surgery clinic\",\r\n  \"CSC\": \"community service center\",\r\n  \"CVDX\":    \"cardiovascular diagnostics or therapeutics unit\",\r\n  \"DA\":  \"dairy\",\r\n  \"DADDR\":   \"delivery address\",\r\n  \"DAU\": \"natural daughter\",\r\n  \"DAUADOPT\":    \"adopted daughter\",\r\n  \"DAUC\":    \"daughter\",\r\n  \"DAUFOST\": \"foster daughter\",\r\n  \"DAUINLAW\":    \"daughter in-law\",\r\n  \"DC\":  \"therapeutic class\",\r\n  \"DEBR\":    \"debridement\",\r\n  \"DERM\":    \"dermatology clinic\",\r\n  \"DIFFABL\": \"differently abled\",\r\n  \"DOMPART\": \"domestic partner\",\r\n  \"DPOWATT\": \"durable power of attorney\",\r\n  \"DR\":  \"draft\",\r\n  \"DU\":  \"dual\",\r\n  \"DX\":  \"diagnostics or therapeutics unit\",\r\n  \"E\":   \"electronic qc\",\r\n  \"ECHO\":    \"echocardiography lab\",\r\n  \"ECON\":    \"emergency contact\",\r\n  \"ENDO\":    \"endocrinology clinic\",\r\n  \"ENDOS\":   \"endoscopy lab\",\r\n  \"ENROLBKR\":    \"enrollment broker\",\r\n  \"ENT\": \"otorhinolaryngology clinic\",\r\n  \"EPIL\":    \"epilepsy unit\",\r\n  \"ER\":  \"emergency room\",\r\n  \"ERL\": \"enrollment\",\r\n  \"ETU\": \"emergency trauma unit\",\r\n  \"EXCEST\":  \"executor of estate\",\r\n  \"EXT\": \"extended family member\",\r\n  \"F\":   \"filler proficiency\",\r\n  \"FAMDEP\":  \"family dependent\",\r\n  \"FAMMEMB\": \"family member\",\r\n  \"FI\":  \"fiber\",\r\n  \"FMC\": \"family medicine clinic\",\r\n  \"FRND\":    \"unrelated friend\",\r\n  \"FSTUD\":   \"full-time student\",\r\n  \"FTH\": \"father\",\r\n  \"FTHINLAW\":    \"father-in-law\",\r\n  \"FULLINS\": \"fully insured coverage sponsor\",\r\n  \"G\":   \"group\",\r\n  \"GACH\":    \"hospitals; general acute care hospital\",\r\n  \"GD\":  \"generic drug\",\r\n  \"GDF\": \"generic drug form\",\r\n  \"GDS\": \"generic drug strength\",\r\n  \"GDSF\":    \"generic drug strength form\",\r\n  \"GGRFTH\":  \"great grandfather\",\r\n  \"GGRMTH\":  \"great grandmother\",\r\n  \"GGRPRN\":  \"great grandparent\",\r\n  \"GI\":  \"gastroenterology clinic\",\r\n  \"GIDX\":    \"gastroenterology diagnostics or therapeutics lab\",\r\n  \"GIM\": \"general internal medicine clinic\",\r\n  \"GRFTH\":   \"grandfather\",\r\n  \"GRMTH\":   \"grandmother\",\r\n  \"GRNDCHILD\":   \"grandchild\",\r\n  \"GRNDDAU\": \"granddaughter\",\r\n  \"GRNDSON\": \"grandson\",\r\n  \"GRPRN\":   \"grandparent\",\r\n  \"GT\":  \"guarantor\",\r\n  \"GUADLTM\": \"guardian ad lidem\",\r\n  \"GUARD\":   \"guardian\",\r\n  \"GYN\": \"gynecology clinic\",\r\n  \"HAND\":    \"hand clinic\",\r\n  \"HANDIC\":  \"handicapped dependent\",\r\n  \"HBRO\":    \"half-brother\",\r\n  \"HD\":  \"hemodialysis unit\",\r\n  \"HEM\": \"hematology clinic\",\r\n  \"HLAB\":    \"hospital laboratory\",\r\n  \"HOMEHEALTH\":  \"home health\",\r\n  \"HOSP\":    \"hospital\",\r\n  \"HPOWATT\": \"healthcare power of attorney\",\r\n  \"HRAD\":    \"radiology unit\",\r\n  \"HSIB\":    \"half-sibling\",\r\n  \"HSIS\":    \"half-sister\",\r\n  \"HTN\": \"hypertension clinic\",\r\n  \"HU\":  \"hospital unit\",\r\n  \"HUSB\":    \"husband\",\r\n  \"HUSCS\":   \"specimen collection site\",\r\n  \"ICU\": \"intensive care unit\",\r\n  \"IEC\": \"impairment evaluation center\",\r\n  \"INDIG\":   \"member of an indigenous people\",\r\n  \"INFD\":    \"infectious disease clinic\",\r\n  \"INJ\": \"injured plaintiff\",\r\n  \"INJWKR\":  \"injured worker\",\r\n  \"INLAB\":   \"inpatient laboratory\",\r\n  \"INPHARM\": \"inpatient pharmacy\",\r\n  \"INV\": \"infertility clinic\",\r\n  \"JURID\":   \"jurisdiction location identifier\",\r\n  \"L\":   \"pool\",\r\n  \"LABORATORY\":  \"laboratory\",\r\n  \"LOCHFID\": \"local location identifier\",\r\n  \"LY\":  \"layer\",\r\n  \"LYMPH\":   \"lympedema clinic\",\r\n  \"MAUNT\":   \"maternalaunt\",\r\n  \"MBL\": \"medical laboratory\",\r\n  \"MCOUSN\":  \"maternalcousin\",\r\n  \"MGDSF\":   \"manufactured drug strength form\",\r\n  \"MGEN\":    \"medical genetics clinic\",\r\n  \"MGGRFTH\": \"maternalgreatgrandfather\",\r\n  \"MGGRMTH\": \"maternalgreatgrandmother\",\r\n  \"MGGRPRN\": \"maternalgreatgrandparent\",\r\n  \"MGRFTH\":  \"maternalgrandfather\",\r\n  \"MGRMTH\":  \"maternalgrandmother\",\r\n  \"MGRPRN\":  \"maternalgrandparent\",\r\n  \"MHSP\":    \"military hospital\",\r\n  \"MIL\": \"military\",\r\n  \"MOBL\":    \"mobile unit\",\r\n  \"MT\":  \"meat\",\r\n  \"MTH\": \"mother\",\r\n  \"MTHINLAW\":    \"mother-in-law\",\r\n  \"MU\":  \"multiplier\",\r\n  \"MUNCLE\":  \"maternaluncle\",\r\n  \"NBOR\":    \"neighbor\",\r\n  \"NBRO\":    \"natural brother\",\r\n  \"NCCF\":    \"nursing or custodial care facility\",\r\n  \"NCCS\":    \"neurology critical care and stroke unit\",\r\n  \"NCHILD\":  \"natural child\",\r\n  \"NEPH\":    \"nephrology clinic\",\r\n  \"NEPHEW\":  \"nephew\",\r\n  \"NEUR\":    \"neurology clinic\",\r\n  \"NFTH\":    \"natural father\",\r\n  \"NFTHF\":   \"natural father of fetus\",\r\n  \"NIECE\":   \"niece\",\r\n  \"NIENEPH\": \"niece/nephew\",\r\n  \"NMTH\":    \"natural mother\",\r\n  \"NOK\": \"next of kin\",\r\n  \"NPRN\":    \"natural parent\",\r\n  \"NS\":  \"neurosurgery unit\",\r\n  \"NSIB\":    \"natural sibling\",\r\n  \"NSIS\":    \"natural sister\",\r\n  \"O\":   \"operator proficiency\",\r\n  \"OB\":  \"obstetrics clinic\",\r\n  \"OF\":  \"outpatient facility\",\r\n  \"OMS\": \"oral and maxillofacial surgery clinic\",\r\n  \"ONCL\":    \"medical oncology clinic\",\r\n  \"OPH\": \"opthalmology clinic\",\r\n  \"OPTC\":    \"optometry clinic\",\r\n  \"ORG\": \"organizational contact\",\r\n  \"ORTHO\":   \"orthopedics clinic\",\r\n  \"OUTLAB\":  \"outpatient laboratory\",\r\n  \"OUTPHARM\":    \"outpatient pharmacy\",\r\n  \"P\":   \"patient\",\r\n  \"PAINCL\":  \"pain clinic\",\r\n  \"PATHOLOGIST\": \"pathologist\",\r\n  \"PAUNT\":   \"paternalaunt\",\r\n  \"PAYOR\":   \"payor contact\",\r\n  \"PC\":  \"primary care clinic\",\r\n  \"PCOUSN\":  \"paternalcousin\",\r\n  \"PEDC\":    \"pediatrics clinic\",\r\n  \"PEDCARD\": \"pediatric cardiology clinic\",\r\n  \"PEDE\":    \"pediatric endocrinology clinic\",\r\n  \"PEDGI\":   \"pediatric gastroenterology clinic\",\r\n  \"PEDHEM\":  \"pediatric hematology clinic\",\r\n  \"PEDHO\":   \"pediatric oncology clinic\",\r\n  \"PEDICU\":  \"pediatric intensive care unit\",\r\n  \"PEDID\":   \"pediatric infectious disease clinic\",\r\n  \"PEDNEPH\": \"pediatric nephrology clinic\",\r\n  \"PEDNICU\": \"pediatric neonatal intensive care unit\",\r\n  \"PEDRHEUM\":    \"pediatric rheumatology clinic\",\r\n  \"PEDU\":    \"pediatric unit\",\r\n  \"PGGRFTH\": \"paternalgreatgrandfather\",\r\n  \"PGGRMTH\": \"paternalgreatgrandmother\",\r\n  \"PGGRPRN\": \"paternalgreatgrandparent\",\r\n  \"PGRFTH\":  \"paternalgrandfather\",\r\n  \"PGRMTH\":  \"paternalgrandmother\",\r\n  \"PGRPRN\":  \"paternalgrandparent\",\r\n  \"PH\":  \"policy holder\",\r\n  \"PHARM\":   \"pharmacy\",\r\n  \"PHLEBOTOMIST\":    \"phlebotomist\",\r\n  \"PHU\": \"psychiatric hospital unit\",\r\n  \"PL\":  \"pleasure\",\r\n  \"PLS\": \"plastic surgery clinic\",\r\n  \"POD\": \"podiatry clinic\",\r\n  \"POWATT\":  \"power of attorney\",\r\n  \"PRC\": \"pain rehabilitation center\",\r\n  \"PREV\":    \"preventive medicine clinic\",\r\n  \"PRN\": \"parent\",\r\n  \"PRNINLAW\":    \"parent in-law\",\r\n  \"PROCTO\":  \"proctology clinic\",\r\n  \"PROFF\":   \"provider's office\",\r\n  \"PROG\":    \"program eligible\",\r\n  \"PROS\":    \"prosthodontics clinic\",\r\n  \"PSI\": \"psychology clinic\",\r\n  \"PSTUD\":   \"part-time student\",\r\n  \"PSY\": \"psychiatry clinic\",\r\n  \"PSYCHF\":  \"psychiatric care facility\",\r\n  \"PT\":  \"patient\",\r\n  \"PTRES\":   \"patient's residence\",\r\n  \"PUNCLE\":  \"paternaluncle\",\r\n  \"Q\":   \"quality control\",\r\n  \"R\":   \"replicate\",\r\n  \"RADDX\":   \"radiology diagnostics or therapeutics unit\",\r\n  \"RADO\":    \"radiation oncology unit\",\r\n  \"RC\":  \"racing\",\r\n  \"RESPRSN\": \"responsible party\",\r\n  \"RETIREE\": \"retiree\",\r\n  \"RETMIL\":  \"retired military\",\r\n  \"RH\":  \"rehabilitation hospital\",\r\n  \"RHAT\":    \"addiction treatment center\",\r\n  \"RHEUM\":   \"rheumatology clinic\",\r\n  \"RHII\":    \"intellectual impairment center\",\r\n  \"RHMAD\":   \"parents with adjustment difficulties center\",\r\n  \"RHPI\":    \"physical impairment center\",\r\n  \"RHPIH\":   \"physical impairment - hearing center\",\r\n  \"RHPIMS\":  \"physical impairment - motor skills center\",\r\n  \"RHPIVS\":  \"physical impairment - visual skills center\",\r\n  \"RHU\": \"rehabilitation hospital unit\",\r\n  \"RHYAD\":   \"youths with adjustment difficulties center\",\r\n  \"RNEU\":    \"neuroradiology unit\",\r\n  \"ROOM\":    \"roommate\",\r\n  \"RTF\": \"residential treatment facility\",\r\n  \"SCHOOL\":  \"school\",\r\n  \"SCN\": \"screening\",\r\n  \"SEE\": \"seeing\",\r\n  \"SELF\":    \"self\",\r\n  \"SELFINS\": \"self insured coverage sponsor\",\r\n  \"SH\":  \"show\",\r\n  \"SIB\": \"sibling\",\r\n  \"SIBINLAW\":    \"sibling in-law\",\r\n  \"SIGOTHR\": \"significant other\",\r\n  \"SIS\": \"sister\",\r\n  \"SISINLAW\":    \"sister-in-law\",\r\n  \"SLEEP\":   \"sleep disorders unit\",\r\n  \"SNF\": \"skilled nursing facility\",\r\n  \"SNIFF\":   \"sniffing\",\r\n  \"SON\": \"natural son\",\r\n  \"SONADOPT\":    \"adopted son\",\r\n  \"SONC\":    \"son\",\r\n  \"SONFOST\": \"foster son\",\r\n  \"SONINLAW\":    \"son in-law\",\r\n  \"SPMED\":   \"sports medicine clinic\",\r\n  \"SPON\":    \"sponsored dependent\",\r\n  \"SPOWATT\": \"special power of attorney\",\r\n  \"SPS\": \"spouse\",\r\n  \"STPBRO\":  \"stepbrother\",\r\n  \"STPCHLD\": \"step child\",\r\n  \"STPDAU\":  \"stepdaughter\",\r\n  \"STPFTH\":  \"stepfather\",\r\n  \"STPMTH\":  \"stepmother\",\r\n  \"STPPRN\":  \"step parent\",\r\n  \"STPSIB\":  \"step sibling\",\r\n  \"STPSIS\":  \"stepsister\",\r\n  \"STPSON\":  \"stepson\",\r\n  \"STUD\":    \"student\",\r\n  \"SU\":  \"surgery clinic\",\r\n  \"SUBJECT\": \"self\",\r\n  \"SURF\":    \"substance use rehabilitation facility\",\r\n  \"THIRDPARTY\":  \"third party\",\r\n  \"TPA\": \"third party administrator\",\r\n  \"TR\":  \"transplant clinic\",\r\n  \"TRAVEL\":  \"travel and geographic medicine clinic\",\r\n  \"TRB\": \"tribal member\",\r\n  \"UMO\": \"utilization management organization\",\r\n  \"UNCLE\":   \"uncle\",\r\n  \"UPC\": \"underage protection center\",\r\n  \"URO\": \"urology clinic\",\r\n  \"V\":   \"verifying\",\r\n  \"VET\": \"veteran\",\r\n  \"VL\":  \"veal\",\r\n  \"WARD\":    \"ward\",\r\n  \"WIFE\":    \"wife\",\r\n  \"WL\":  \"wool\",\r\n  \"WND\": \"wound clinic\",\r\n  \"WO\":  \"working\",\r\n  \"WORK\":    \"work site\",\r\n};\r\n\r\nvar PROBLEM_STATUS_MAP = {\r\n  \"55561003\": \"active\",\r\n  \"73425007\": \"inactive\",\r\n  \"413322009\": \"resolved\"\r\n};\r\n\r\n\r\n// copied from _.invert to avoid making browser users include all of underscore\r\nvar invertKeys = function(obj) {\r\n  var result = {};\r\n  var keys = Object.keys(obj);\r\n  for (var i = 0, length = keys.length; i < length; i++) {\r\n    result[obj[keys[i]]] = keys[i];\r\n  }\r\n  return result;\r\n};\r\n\r\nvar lookupFnGenerator = function(map) {\r\n  return function(key) {\r\n    return map[key] || null;\r\n  };\r\n};\r\nvar reverseLookupFnGenerator = function(map) {\r\n  return function(key) {\r\n    if (!key) { return null; }\r\n    var invertedMap = invertKeys(map);\r\n    key = key.toLowerCase();\r\n    return invertedMap[key] || null;\r\n  };\r\n};\r\n\r\n\r\nmodule.exports =  {\r\n  gender: lookupFnGenerator(GENDER_MAP),\r\n  reverseGender: reverseLookupFnGenerator(GENDER_MAP),\r\n  maritalStatus: lookupFnGenerator(MARITAL_STATUS_MAP),\r\n  reverseMaritalStatus: reverseLookupFnGenerator(MARITAL_STATUS_MAP),\r\n  religion: lookupFnGenerator(RELIGION_MAP),\r\n  reverseReligion: reverseLookupFnGenerator(RELIGION_MAP),\r\n  raceEthnicity: lookupFnGenerator(RACE_ETHNICITY_MAP),\r\n  reverseRaceEthnicity: reverseLookupFnGenerator(RACE_ETHNICITY_MAP),\r\n  role: lookupFnGenerator(ROLE_MAP),\r\n  reverseRole: reverseLookupFnGenerator(ROLE_MAP),\r\n  problemStatus: lookupFnGenerator(PROBLEM_STATUS_MAP),\r\n  reverseProblemStatus: reverseLookupFnGenerator(PROBLEM_STATUS_MAP)\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/codes.js\n// module id = 6\n// module chunks = 0","/*\r\n * ...\r\n */\r\nvar { stripWhitespace } = require('./common');\r\n/*\r\n  * A function used to wrap DOM elements in an object so methods can be added\r\n  * to the element object. IE8 does not allow methods to be added directly to\r\n  * DOM objects.\r\n  */\r\nvar wrapElement = function (el) {\r\n  function wrapElementHelper(currentEl) {\r\n    return {\r\n      el: currentEl,\r\n      template: template,\r\n      content: content,\r\n      tag: tag,\r\n      immediateChildTag: immediateChildTag,\r\n      elsByTag: elsByTag,\r\n      attr: attr,\r\n      boolAttr: boolAttr,\r\n      val: val,\r\n      isEmpty: isEmpty\r\n    };\r\n  }\r\n  \r\n  // el is an array of elements\r\n  if (el.length) {\r\n    var els = [];\r\n    for (var i = 0; i < el.length; i++) {\r\n      els.push(wrapElementHelper(el[i]));\r\n    }\r\n    return els;\r\n  \r\n  // el is a single element\r\n  } else {\r\n    return wrapElementHelper(el);\r\n  }\r\n};\r\n\r\n\r\n/*\r\n  * Find element by tag name, then attribute value.\r\n  */\r\nvar tagAttrVal = function (el, tag, attr, value) {\r\n  el = el.getElementsByTagName(tag);\r\n  for (var i = 0; i < el.length; i++) {\r\n    if (el[i].getAttribute(attr) === value) {\r\n      return el[i];\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/*\r\n  * Search for a template ID, and return its parent element.\r\n  * Example:\r\n  *   <templateId root=\"2.16.840.1.113883.10.20.22.2.17\"/>\r\n  * Can be found using:\r\n  *   el = dom.template('2.16.840.1.113883.10.20.22.2.17');\r\n  */\r\nvar template = function (templateId) {\r\n  var el = tagAttrVal(this.el, 'templateId', 'root', templateId);\r\n  if (!el) {\r\n    return emptyEl();\r\n  } else {\r\n    return wrapElement(el.parentNode);\r\n  }\r\n};\r\n\r\n/*\r\n  * Search for a content tag by \"ID\", and return it as an element.\r\n  * These are used in the unstructured versions of each section but\r\n  * referenced from the structured version sometimes.\r\n  * Example:\r\n  *   <content ID=\"UniqueNameReferencedElsewhere\"/>\r\n  * Can be found using:\r\n  *   el = dom.content('UniqueNameReferencedElsewhere');\r\n  *\r\n  * We can't use `getElementById` because `ID` (the standard attribute name\r\n  * in this context) is not the same attribute as `id` in XML, so there are no matches\r\n  */\r\nvar content = function (contentId) {\r\n    var el = tagAttrVal(this.el, 'content', 'ID', contentId);\r\n    if (!el) {\r\n      // check the <td> tag too, which isn't really correct but\r\n      // will inevitably be used sometimes because it looks like very\r\n      // normal HTML to put the data directly in a <td>\r\n      el = tagAttrVal(this.el, 'td', 'ID', contentId);\r\n    }\r\n    if (!el) {\r\n      // Ugh, Epic uses really non-standard locations.\r\n      el = tagAttrVal(this.el, 'caption', 'ID', contentId) ||\r\n            tagAttrVal(this.el, 'paragraph', 'ID', contentId) ||\r\n            tagAttrVal(this.el, 'tr', 'ID', contentId) ||\r\n            tagAttrVal(this.el, 'item', 'ID', contentId);\r\n    }\r\n\r\n    if (!el) {\r\n      return emptyEl();\r\n    } else {\r\n      return wrapElement(el);\r\n    }\r\n  };\r\n\r\n\r\n/*\r\n  * Search for the first occurrence of an element by tag name.\r\n  */\r\nvar tag = function (tag) {\r\n  var el = this.el.getElementsByTagName(tag)[0];\r\n  if (!el) {\r\n    return emptyEl();\r\n  } else {\r\n    return wrapElement(el);\r\n  }\r\n};\r\n\r\n/*\r\n  * Like `tag`, except it will only count a tag that is an immediate child of `this`.\r\n  * This is useful for tags like \"text\" which A. may not be present for a given location\r\n  * in every document and B. have a very different meaning depending on their positioning\r\n  *\r\n  *   <parent>\r\n  *     <target></target>\r\n  *   </parent>\r\n  * vs.\r\n  *   <parent>\r\n  *     <intermediate>\r\n  *       <target></target>\r\n  *     </intermediate>\r\n  *   </parent>\r\n  * parent.immediateChildTag('target') will have a result in the first case but not in the second.\r\n  */\r\nvar immediateChildTag = function (tag) {\r\n  var els = this.el.getElementsByTagName(tag);\r\n  if (!els) { return null; }\r\n  for (var i = 0; i < els.length; i++) {\r\n    if (els[i].parentNode === this.el) {\r\n      return wrapElement(els[i]);\r\n    }\r\n  }\r\n  return emptyEl();\r\n};\r\n\r\n\r\n/*\r\n  * Search for all elements by tag name.\r\n  */\r\nvar elsByTag = function (tag) {\r\n  return wrapElement(this.el.getElementsByTagName(tag));\r\n};\r\n\r\n\r\nvar unescapeSpecialChars = function(s) {\r\n  if (!s) { return s; }\r\n  return s.replace(/&lt;/g, '<')\r\n          .replace(/&gt;/g, '>')\r\n          .replace(/&amp;/g, '&')\r\n          .replace(/&quot;/g, '\"')\r\n          .replace(/&apos;/g, \"'\");\r\n};\r\n\r\n\r\n/*\r\n  * Retrieve the element's attribute value. Example:\r\n  *   value = el.attr('displayName');\r\n  *\r\n  * The browser and jsdom return \"null\" for empty attributes;\r\n  * xmldom (which we now use because it's faster / can be explicitly\r\n  * told to parse malformed XML as XML anyways), return the empty\r\n  * string instead, so we fix that here.\r\n  */\r\nvar attr = function (attrName) {\r\n  if (!this.el) { return null; }\r\n  var attrVal = this.el.getAttribute(attrName);\r\n  if (attrVal) {\r\n    return unescapeSpecialChars(attrVal);\r\n  }\r\n  return null;\r\n};\r\n\r\n/*\r\n  * Wrapper for attr() for retrieving boolean attributes;\r\n  * a raw call attr() will return Strings, which can be unexpected,\r\n  * since the string 'false' will by truthy\r\n  */\r\nvar boolAttr = function (attrName) {\r\n  var rawAttr = this.attr(attrName);\r\n  if (rawAttr === 'true' || rawAttr === '1') {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/*\r\n  * Retrieve the element's value. For example, if the element is:\r\n  *   <city>Madison</city>\r\n  * Use:\r\n  *   value = el.tag('city').val();\r\n  *\r\n  * This function also knows how to retrieve the value of <reference> tags,\r\n  * which can store their content in a <content> tag in a totally different\r\n  * part of the document.\r\n  */\r\nvar val = function (html) {\r\n  if (!this.el) { return null; }\r\n  if (!this.el.childNodes || !this.el.childNodes.length) { return null; }\r\n  var textContent = html ? this.el.innerHTML : this.el.textContent;\r\n\r\n  // if there's no text value here and the only thing inside is a\r\n  // <reference> tag, see if there's a linked <content> tag we can\r\n  // get something out of\r\n  if (!stripWhitespace(textContent)) {\r\n\r\n    var contentId;\r\n    // \"no text value\" might mean there's just a reference tag\r\n    if (this.el.childNodes.length === 1 &&\r\n        this.el.childNodes[0].tagName === 'reference') {\r\n      contentId = this.el.childNodes[0].getAttribute('value');\r\n\r\n    // or maybe a newlines on top/above the reference tag\r\n    } else if (this.el.childNodes.length === 3 &&\r\n        this.el.childNodes[1].tagName === 'reference') {\r\n      contentId = this.el.childNodes[1].getAttribute('value');\r\n\r\n    } else {\r\n      return unescapeSpecialChars(textContent);\r\n    }\r\n\r\n    if (contentId && contentId[0] === '#') {\r\n      contentId = contentId.slice(1); // get rid of the '#'\r\n      var docRoot = wrapElement(this.el.ownerDocument);\r\n      var contentTag = docRoot.content(contentId);\r\n      return contentTag.val();\r\n    }\r\n  }\r\n\r\n  return unescapeSpecialChars(textContent);\r\n};\r\n\r\n\r\n/*\r\n  * Creates and returns an empty DOM element with tag name \"empty\":\r\n  *   <empty></empty>\r\n  */\r\nvar emptyEl = function () {\r\n  var el = doc.createElement('empty');\r\n  return wrapElement(el);\r\n};\r\n\r\n\r\n/*\r\n  * Determines if the element is empty, i.e.:\r\n  *   <empty></empty>\r\n  * This element is created by function `emptyEL`.\r\n  */\r\nvar isEmpty = function () {\r\n  if (this.el.tagName.toLowerCase() === 'empty') {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\n/*\r\n  * Cross-browser XML parsing supporting IE8+ and Node.js.\r\n  */\r\nfunction parse(data) {\r\n  // XML data must be a string\r\n  if (!data || typeof data !== \"string\") {\r\n    console.log(\"BB Error: XML data is not a string\");\r\n    return null;\r\n  }\r\n  \r\n  var xml, parser;\r\n  \r\n  // Node\r\n  if (isNode) {\r\n    parser = new (xmldom.DOMParser)();\r\n    xml = parser.parseFromString(data, \"text/xml\");\r\n    \r\n  // Browser\r\n  } else {\r\n    \r\n    // Standard parser\r\n    if (window.DOMParser) {\r\n      parser = new DOMParser();\r\n      xml = parser.parseFromString(data, \"text/xml\");\r\n      \r\n    // IE\r\n    } else {\r\n      try {\r\n        xml = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n        xml.async = \"false\";\r\n        xml.loadXML(data);\r\n      } catch (e) {\r\n        console.log(\"BB ActiveX Exception: Could not parse XML\");\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!xml || !xml.documentElement || xml.getElementsByTagName(\"parsererror\").length) {\r\n    console.log(\"BB Error: Could not parse XML\");\r\n    return null;\r\n  }\r\n  \r\n  return wrapElement(xml);\r\n};\r\n\r\n\r\n// Establish the root object, `window` in the browser, or `global` in Node.\r\nvar root = this,\r\n    xmldom,\r\n    isNode = false,\r\n    doc = root.document; // Will be `undefined` if we're in Node\r\n\r\n// Check if we're in Node. If so, pull in `xmldom` so we can simulate the DOM.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    isNode = true;\r\n    xmldom = require(\"xmldom\");\r\n    doc = new xmldom.DOMImplementation().createDocument();\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  parse: parse\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/core/xml.js\n// module id = 7\n// module chunks = 0","module.exports = require(\"xmldom\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"xmldom\"\n// module id = 8\n// module chunks = 0","/*\r\n  * ...\r\n  */\r\nvar C32 = require('./documents/c32');\r\nvar CCD = require('./documents/ccd');\r\nvar CCDA = require('./documents/ccda');\r\nvar CCDAR2 = require('./documents/ccdar2');\r\n\r\nmodule.exports = function() {\r\n  var self = this;\r\n\r\n  self.detect = detect;\r\n  self.entries = entries;\r\n  self.parseDate = parseDate;\r\n  self.parseName = parseName;\r\n  self.parseAddress = parseAddress;\r\n  self.C32 = new C32(getEntries);\r\n  self.CCD = new CCD(getEntries);\r\n  self.CCDA = new CCDA(getEntries);\r\n  self.CCDAR2 = new CCDAR2(getEntries);\r\n};\r\n\r\nfunction getEntries() {\r\n  return entries;\r\n};\r\n\r\nfunction detect(data) {\r\n  if (!data.template) {\r\n    return 'json';\r\n  }\r\n  \r\n  if (!data.template('2.16.840.1.113883.3.88.11.32.1').isEmpty()) {\r\n    return 'c32';\r\n  } else if(!data.template('2.16.840.1.113883.10.20.22.1.1').isEmpty()) {\r\n    return 'ccda';\r\n  } else if(!data.template('2.16.840.1.113883.10.20.22.1.15').isEmpty()) {\r\n    return 'ccdar2';\r\n  }else if(!data.template('2.16.840.1.113883.10.20.22.1.2').isEmpty()) {\r\n    return 'ccd';\r\n  }\r\n};\r\n\r\n\r\n/*\r\n  * Get entries within an element (with tag name 'entry'), adds an `each` function\r\n  */\r\nfunction entries() {\r\n  var each = function (callback) {\r\n    for (var i = 0; i < this.length; i++) {\r\n      callback(this[i]);\r\n    }\r\n  };\r\n  \r\n  var els = this.elsByTag('entry');\r\n  els.each = each;\r\n  return els;\r\n};\r\n\r\n\r\n/*\r\n  * Parses an HL7 date in String form and creates a new Date object.\r\n  * \r\n  * TODO: CCDA dates can be in form:\r\n  *   <effectiveTime value=\"20130703094812\"/>\r\n  * ...or:\r\n  *   <effectiveTime>\r\n  *     <low value=\"19630617120000\"/>\r\n  *     <high value=\"20110207100000\"/>\r\n  *   </effectiveTime>\r\n  * For the latter, parseDate will not be given type `String`\r\n  * and will return `null`.\r\n  */\r\nfunction parseDate(str) {\r\n  if (!str || typeof str !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  // Note: months start at 0 (so January is month 0)\r\n\r\n  // e.g., value=\"1999\" translates to Jan 1, 1999\r\n  if (str.length === 4) {\r\n    return new Date(str, 0, 1);\r\n  }\r\n\r\n  var year = str.substr(0, 4);\r\n  // subtract 1 from the month since they're zero-indexed\r\n  var month = parseInt(str.substr(4, 2), 10) - 1;\r\n  // days are not zero-indexed. If we end up with the day 0 or '',\r\n  // that will be equivalent to the last day of the previous month\r\n  var day = str.substr(6, 2) || 1;\r\n\r\n  // check for time info (the presence of at least hours and mins after the date)\r\n  if (str.length >= 12) {\r\n    var hour = str.substr(8, 2);\r\n    var min = str.substr(10, 2);\r\n    var secs = str.substr(12, 2);\r\n\r\n    // check for timezone info (the presence of chars after the seconds place)\r\n    if (str.length > 14) {\r\n      // _utcOffsetFromString will return 0 if there's no utc offset found.\r\n      var utcOffset = _utcOffsetFromString(str.substr(14));\r\n      // We subtract that offset from the local time to get back to UTC\r\n      // (e.g., if we're -480 mins behind UTC, we add 480 mins to get back to UTC)\r\n      min = _toInt(min) - utcOffset;\r\n    }\r\n\r\n    var date = new Date(Date.UTC(year, month, day, hour, min, secs));\r\n    // This flag lets us output datetime-precision in our JSON even if the time happens\r\n    // to translate to midnight local time. If we clone the date object, it is not\r\n    // guaranteed to survive.\r\n    date._parsedWithTimeData = true;\r\n    return date;\r\n  }\r\n\r\n  return new Date(year, month, day);\r\n};\r\n\r\n// These regexes and the two functions below are copied from moment.js\r\n// http://momentjs.com/\r\n// https://github.com/moment/moment/blob/develop/LICENSE\r\nvar parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi;\r\nvar parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\r\nfunction _utcOffsetFromString(string) {\r\n    string = string || '';\r\n    var possibleTzMatches = (string.match(parseTokenTimezone) || []),\r\n        tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],\r\n        parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],\r\n        minutes = +(parts[1] * 60) + _toInt(parts[2]);\r\n\r\n    return parts[0] === '+' ? minutes : -minutes;\r\n}\r\nfunction _toInt(argumentForCoercion) {\r\n    var coercedNumber = +argumentForCoercion,\r\n        value = 0;\r\n\r\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {\r\n        if (coercedNumber >= 0) {\r\n            value = Math.floor(coercedNumber);\r\n        } else {\r\n            value = Math.ceil(coercedNumber);\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n\r\n/*\r\n  * Parses an HL7 name (prefix / given [] / family)\r\n  */\r\nfunction parseName(nameEl) {\r\n  var prefix = nameEl.tag('prefix').val();\r\n  \r\n  var els = nameEl.elsByTag('given');\r\n  var given = [];\r\n  for (var i = 0; i < els.length; i++) {\r\n    var val = els[i].val();\r\n    if (val) { given.push(val); }\r\n  }\r\n  \r\n  var family = nameEl.tag('family').val();\r\n  \r\n  return {\r\n    prefix: prefix,\r\n    given: given,\r\n    family: family\r\n  };\r\n};\r\n\r\n\r\n/*\r\n  * Parses an HL7 address (streetAddressLine [], city, state, postalCode, country)\r\n  */\r\nfunction parseAddress(addrEl) {\r\n  var els = addrEl.elsByTag('streetAddressLine');\r\n  var street = [];\r\n  \r\n  for (var i = 0; i < els.length; i++) {\r\n    var val = els[i].val();\r\n    if (val) { street.push(val); }\r\n  }\r\n  \r\n  var city = addrEl.tag('city').val(),\r\n      state = addrEl.tag('state').val(),\r\n      zip = addrEl.tag('postalCode').val(),\r\n      country = addrEl.tag('country').val();\r\n  \r\n  return {\r\n    street: street,\r\n    city: city,\r\n    state: state,\r\n    zip: zip,\r\n    country: country\r\n  };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/documents.js\n// module id = 9\n// module chunks = 0","/*\r\n * ...\r\n */\r\n \r\nmodule.exports = function(getEntries) {\r\n  var self = this;\r\n\r\n  self.getEntries = getEntries;\r\n  self.process = process;\r\n  self.section = section;\r\n\r\n  /*\r\n  * Preprocesses the C32 document\r\n  */\r\n  function process(c32) {\r\n    c32.section = section;\r\n    return c32;\r\n  };\r\n\r\n  /*\r\n    * Finds the section of a C32 document\r\n    *\r\n    * Usually we check first for the HITSP section ID and then for the HL7-CCD ID.\r\n    */\r\n  function section(name) {\r\n    var el, entries = self.getEntries();\r\n    \r\n    switch (name) {\r\n      case 'document':\r\n        return this.template('2.16.840.1.113883.3.88.11.32.1');\r\n      case 'allergies':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.102');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.2');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'demographics':\r\n        return this.template('2.16.840.1.113883.3.88.11.32.1');\r\n      case 'encounters':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.127');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.3');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'immunizations':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.117');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.6');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'results':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.122');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.14');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'medications':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.112');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.8');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'problems':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.103');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.11');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'procedures':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.108');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.12');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'vitals':\r\n        el = this.template('2.16.840.1.113883.3.88.11.83.119');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.1.16');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/documents/c32.js\n// module id = 10\n// module chunks = 0","/*\r\n * ...\r\n */\r\n\r\nmodule.exports = function (getEntries) {\r\n    var self = this;\r\n    self.getEntries = getEntries;\r\n\r\n    self.process = process;\r\n    self.section = section;\r\n\r\n    /*\r\n     * Preprocesses the CCDAR2 document\r\n     */\r\n    function process(ccda) {\r\n        ccda.section = section;\r\n        return ccda;\r\n    };\r\n\r\n    /*\r\n     * Finds the section of a CCDA document\r\n     */\r\n    function section(name) {\r\n        var el, entries = self.getEntries();\r\n\r\n        switch (name) {\r\n            case 'document':\r\n                return this.template('2.16.840.1.113883.10.20.22.1.2');\r\n            case 'demographics':\r\n                return this.template('2.16.840.1.113883.10.20.22.1.2');\r\n            case 'health_concerns_document':\r\n                el = this.template('2.16.840.1.113883.10.20.22.2.58');\r\n                el.entries = entries;\r\n                return el;\r\n            case 'goals':\r\n                el = this.template('2.16.840.1.113883.10.20.22.2.60');\r\n                el.entries = entries;\r\n                return el;\r\n            case 'interventions':\r\n                el = this.template('2.16.840.1.113883.10.20.21.2.3');\r\n                el.entries = entries;\r\n                return el;\r\n            case 'health_status_outcomes':\r\n                el = this.template('2.16.840.1.113883.10.20.22.2.61');\r\n                el.entries = entries;\r\n                return el;\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/documents/ccd.js\n// module id = 11\n// module chunks = 0","/*\r\n * ...\r\n */\r\n\r\nmodule.exports = function (getEntries) {\r\n  var self = this;\r\n\r\n  self.getEntries = getEntries;\r\n  self.process = process;\r\n  self.section = section;\r\n  \r\n  /*\r\n   * Preprocesses the CCDA document\r\n   */\r\n  function process(ccda) {\r\n    ccda.section = section;\r\n    return ccda;\r\n  };  \r\n  \r\n  /*\r\n   * Finds the section of a CCDA document\r\n   */\r\n  function section(name) {\r\n    var el, entries = self.getEntries();\r\n    \r\n    switch (name) {\r\n      case 'document':\r\n        return this.template('2.16.840.1.113883.10.20.22.1.1');\r\n      case 'allergies':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.6.1');\r\n        el.entries = entries;\r\n        return el;\r\n      case 'care_plan':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.10');\r\n        el.entries = entries;\r\n        return el;\r\n      case 'chief_complaint':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.13');\r\n        if (el.isEmpty()) {\r\n          el = this.template('1.3.6.1.4.1.19376.1.5.3.1.1.13.2.1');\r\n        }\r\n        // no entries in Chief Complaint\r\n        return el;\r\n      case 'demographics':\r\n        return this.template('2.16.840.1.113883.10.20.22.1.1');\r\n      case 'encounters':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.22');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.22.2.22.1');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'functional_statuses':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.14');\r\n        el.entries = entries;\r\n        return el;\r\n      case 'immunizations':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.2.1');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.22.2.2');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'instructions':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.45');\r\n        el.entries = entries;\r\n        return el;\r\n      case 'results':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.3.1');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.22.2.3');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'medications':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.1.1');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.22.2.1');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'problems':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.5.1');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.22.2.5');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'procedures':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.7.1');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.22.2.7');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n      case 'social_history':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.17');\r\n        el.entries = entries;\r\n        return el;\r\n      case 'vitals':\r\n        el = this.template('2.16.840.1.113883.10.20.22.2.4.1');\r\n        if (el.isEmpty()) {\r\n          el = this.template('2.16.840.1.113883.10.20.22.2.4');\r\n        }\r\n        el.entries = entries;\r\n        return el;\r\n    }\r\n    \r\n    return null;\r\n  };  \r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/documents/ccda.js\n// module id = 12\n// module chunks = 0","/*\r\n * ...\r\n */\r\n\r\nmodule.exports = function (getEntries) {\r\n    var self = this;\r\n    self.getEntries = getEntries;\r\n    \r\n    self.process = process;\r\n    self.section = section;   \r\n\r\n    /*\r\n     * Preprocesses the CCDAR2 document\r\n     */\r\n    function process(ccda) {\r\n        ccda.section = section;\r\n        return ccda;\r\n    };\r\n\r\n    /*\r\n     * Finds the section of a CCDA document\r\n     */\r\n    function section(name) {\r\n        var el, entries = self.getEntries();\r\n\r\n        switch (name) {\r\n            case 'document':\r\n                return this.template('2.16.840.1.113883.10.20.22.1.15');\r\n            case 'demographics':\r\n                return this.template('2.16.840.1.113883.10.20.22.1.15');\r\n            case 'health_concerns_document':\r\n                el = this.template('2.16.840.1.113883.10.20.22.2.58');\r\n                el.entries = entries;\r\n                return el;\r\n            case 'goals':\r\n                el = this.template('2.16.840.1.113883.10.20.22.2.60');\r\n                el.entries = entries;\r\n                return el;\r\n            case 'interventions':\r\n                el = this.template('2.16.840.1.113883.10.20.21.2.3');\r\n                el.entries = entries;\r\n                return el;\r\n            case 'health_status_outcomes':\r\n                el = this.template('2.16.840.1.113883.10.20.22.2.61');\r\n                el.entries = entries;\r\n                return el;\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/documents/ccdar2.js\n// module id = 13\n// module chunks = 0","/*\r\n * ...\r\n */\r\n\r\nvar C32 = require('./generators/c32');\r\nvar CCDA = require('./generators/ccda');\r\n\r\nvar method = function () {};\r\n\r\n/* exported Generators */\r\nmodule.exports = {\r\n  method: method,\r\n  C32: C32,\r\n  CCDA: CCDA\r\n};\r\n  \r\n\r\n\r\n  /* Import ejs if we're in Node. Then setup custom formatting filters\r\n   */\r\n  /*if (typeof exports !== 'undefined') {\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n      ejs = require(\"ejs\");\r\n    }\r\n  }\r\n\r\n  if (typeof ejs !== 'undefined') {\r\n    /* Filters are automatically available to ejs to be used like \"... | hl7Date\"\r\n     * Helpers are functions that we'll manually pass in to ejs.\r\n     * The intended distinction is that a helper gets called with regular function-call syntax\r\n     */ /*\r\n    var pad = function(number) {\r\n      if (number < 10) {\r\n        return '0' + number;\r\n      }\r\n      return String(number);\r\n    };\r\n\r\n    ejs.filters.hl7Date = function(obj) {\r\n      try {\r\n          if (obj === null || obj === undefined) { return 'nullFlavor=\"UNK\"'; }\r\n          var date = new Date(obj);\r\n          if (isNaN(date.getTime())) { return obj; }\r\n\r\n          var dateStr = null;\r\n          if (date.getHours() || date.getMinutes() || date.getSeconds()) {\r\n            // If there's a meaningful time, output a UTC datetime\r\n            dateStr = date.getUTCFullYear() +\r\n              pad( date.getUTCMonth() + 1 ) +\r\n              pad( date.getUTCDate() );\r\n            var timeStr = pad( date.getUTCHours() ) +\r\n              pad( date.getUTCMinutes() ) +\r\n              pad ( date.getUTCSeconds() ) +\r\n              \"+0000\";\r\n            return 'value=\"' + dateStr + timeStr + '\"';\r\n           \r\n          } else {\r\n            // If there's no time, don't apply timezone tranformations: just output a date\r\n            dateStr = String(date.getFullYear()) +\r\n              pad( date.getMonth() + 1 ) +\r\n              pad( date.getDate() );\r\n            return 'value=\"' + dateStr + '\"';\r\n          }\r\n\r\n      } catch (e) {\r\n          return obj;\r\n      }\r\n    };\r\n\r\n    var escapeSpecialChars = function(s) {\r\n      return s.replace(/</g, '&lt;')\r\n              .replace(/>/g, '&gt;')\r\n              .replace(/&/g, '&amp;')\r\n              .replace(/\"/g, '&quot;')\r\n              .replace(/'/g, '&apos;');\r\n    };\r\n\r\n    ejs.filters.hl7Code = function(obj) {\r\n      if (!obj) { return ''; }\r\n\r\n      var tag = '';\r\n      var name = obj.name || '';\r\n      if (obj.name) { tag += 'displayName=\"'+escapeSpecialChars(name)+'\"'; }\r\n\r\n      if (obj.code) {\r\n        tag += ' code=\"'+obj.code+'\"';\r\n        if (obj.code_system) { tag += ' codeSystem=\"'+escapeSpecialChars(obj.code_system)+'\"'; }\r\n        if (obj.code_system_name) { tag += ' codeSystemName=\"' +\r\n                                        escapeSpecialChars(obj.code_system_name)+'\"'; }\r\n      } else {\r\n        tag += ' nullFlavor=\"UNK\"';\r\n      }\r\n\r\n      if (!obj.name && ! obj.code) {\r\n        return 'nullFlavor=\"UNK\"';\r\n      }\r\n      \r\n      return tag;\r\n    };\r\n\r\n    ejs.filters.emptyStringIfFalsy = function(obj) {\r\n      if (!obj) { return ''; }\r\n      return obj;\r\n    };\r\n\r\n    if (!ejs.helpers) ejs.helpers = {};\r\n    ejs.helpers.simpleTag = function(tagName, value) {\r\n      if (value) {\r\n        return \"<\"+tagName+\">\"+value+\"</\"+tagName+\">\";\r\n      } else {\r\n        return \"<\"+tagName+\" nullFlavor=\\\"UNK\\\" />\";\r\n      }\r\n    };\r\n\r\n    ejs.helpers.addressTags = function(addressDict) {\r\n      if (!addressDict) {\r\n        return '<streetAddressLine nullFlavor=\"NI\" />\\n' +\r\n                '<city nullFlavor=\"NI\" />\\n' +\r\n                '<state nullFlavor=\"NI\" />\\n' +\r\n                '<postalCode nullFlavor=\"NI\" />\\n' +\r\n                '<country nullFlavor=\"NI\" />\\n';\r\n      }\r\n      \r\n      var tags = '';\r\n      if (!addressDict.street.length) {\r\n        tags += ejs.helpers.simpleTag('streetAddressLine', null) + '\\n';\r\n      } else {\r\n        for (var i=0; i<addressDict.street.length; i++) {\r\n          tags += ejs.helpers.simpleTag('streetAddressLine', addressDict.street[i]) + '\\n';\r\n        }\r\n      }\r\n      tags += ejs.helpers.simpleTag('city', addressDict.city) + '\\n';\r\n      tags += ejs.helpers.simpleTag('state', addressDict.state) + '\\n';\r\n      tags += ejs.helpers.simpleTag('postalCode', addressDict.zip) + '\\n';\r\n      tags += ejs.helpers.simpleTag('country', addressDict.country) + '\\n';\r\n      return tags;\r\n    };\r\n\r\n    ejs.helpers.nameTags = function(nameDict) {\r\n      if (!nameDict) {\r\n        return '<given nullFlavor=\"NI\" />\\n' +\r\n                '<family nullFlavor=\"NI\" />\\n';\r\n      }\r\n\r\n      var tags = '';\r\n      if (nameDict.prefix) {\r\n        tags += ejs.helpers.simpleTag('prefix', nameDict.prefix) + '\\n';\r\n      }\r\n      if (!nameDict.given.length) {\r\n        tags += ejs.helpers.simpleTag('given', null) + '\\n';\r\n      } else {\r\n        for (var i=0; i<nameDict.given.length; i++) {\r\n          tags += ejs.helpers.simpleTag('given', nameDict.given[i]) + '\\n';\r\n        }\r\n      }\r\n      tags += ejs.helpers.simpleTag('family', nameDict.family) + '\\n';\r\n      if (nameDict.suffix) {\r\n        tags += ejs.helpers.simpleTag('suffix', nameDict.suffix) + '\\n';\r\n      }\r\n      return tags;\r\n    };\r\n\r\n  }*/\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/generators.js\n// module id = 14\n// module chunks = 0","/*\r\n * ...\r\n */\r\n\r\nmodule.exports = {\r\n  run: run\r\n};\r\n  \r\n/*\r\n  * Generates a C32 document\r\n  */\r\nfunction run(json, template, testingMode) {\r\n  /* jshint unused: false */ // only until this stub is actually implemented\r\n  console.log(\"C32 generation is not implemented yet\");\r\n  return null;\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/generators/c32.js\n// module id = 15\n// module chunks = 0","/*\r\n * ...\r\n */\r\nvar _ = require('lodash');\r\n\r\nmodule.exports = {\r\n  run: run\r\n};\r\n  \r\n/*\r\n  * Generates a CCDA document\r\n  * A lot of the EJS setup happens in generators.js\r\n  *\r\n  * If `testingMode` is true, we'll set the \"now\" variable to a specific,\r\n  * fixed time, so that the expected XML doesn't change across runs\r\n  */\r\nfunction run(json, template, testingMode) {\r\n  if (!template) {\r\n    console.log(\"Please provide a template EJS file for the Generator to use. \" +\r\n                \"Load it via fs.readFileSync in Node or XHR in the browser.\");\r\n    return null;\r\n  }\r\n\r\n  // `now` is actually now, unless we're running this for a test,\r\n  // in which case it's always Jan 1, 2000 at 12PM UTC\r\n  var now = (testingMode) ?\r\n    new Date('2000-01-01T12:00:00Z') : new Date();\r\n\r\n  var ccda = _.template(template, {\r\n    filename: 'ccda.xml',\r\n    bb: json,\r\n    now: now,\r\n    tagHelpers: ejs.helpers,\r\n    codes: Core.Codes\r\n  });\r\n  return ccda;\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/generators/ccda.js\n// module id = 16\n// module chunks = 0","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 17\n// module chunks = 0","/*\r\n * ...\r\n */\r\nvar C32 = require('./parsers/c32');\r\nvar CCD = require('./parsers/ccd');\r\nvar CCDA = require('./parsers/ccda');\r\nvar CCDAR2 = require('./parsers/ccdar2');\r\n\r\nvar method = function () {};\r\n\r\n/* exported Parsers */\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.method = method;\r\n  self.C32 = new C32(self.doc);\r\n  self.CCD = new CCD(self.doc);\r\n  self.CCDA = new CCDA(self.doc);\r\n  self.CCDAR2 = new CCDAR2(self.doc);\r\n}; \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers.js\n// module id = 18\n// module chunks = 0","/*\r\n * Parser for the C32 document\r\n */\r\n\r\nvar Core = require('../core');\r\nvar AllergiesParser = require('./c32/allergies');\r\nvar DemographicsParser = require('./c32/demographics');\r\nvar DocumentParser = require('./c32/document');\r\nvar EncountersParser = require('./c32/encounters');\r\nvar ImmunizationsParser = require('./c32/immunizations');\r\nvar MedicationsParser = require('./c32/medications');\r\nvar ProblemsParser = require('./c32/problems');\r\nvar ProceduresParser = require('./c32/procedures');\r\nvar ResultsParser = require('./c32/results');\r\nvar VitalsParser = require('./c32/vitals');\r\nvar ParseGenericInfo = require('./generic');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n\r\n  self.doc = doc;\r\n  self.allergiesParser = new AllergiesParser(self.doc);\r\n  self.demographicsParser = new DemographicsParser(self.doc);\r\n  self.demographicsParser = new DocumentParser(self.doc);\r\n  self.encountersParser = new EncountersParser(self.doc);\r\n  self.immunizationsParser = new ImmunizationsParser(self.doc);\r\n  self.medicationsParser = new MedicationsParser(self.doc);\r\n  self.problemsParser = new ProblemsParser(self.doc);\r\n  self.proceduresParser = new ProceduresParser(self.doc);\r\n  self.resultsParser = new ResultsParser(self.doc);\r\n  self.vitalsParser = new VitalsParser(self.doc);\r\n\r\n  self.run = function (c32) {\r\n    var data = {};\r\n    \r\n    data.document              = self.demographicsParser.parse(c32);\r\n    data.allergies             = self.allergiesParser.parse(c32);\r\n    data.demographics          = self.demographicsParser.parse(c32);\r\n    data.encounters            = self.encountersParser.parse(c32);\r\n    var parsedImmunizations    = self.immunizationsParser.parse(c32);\r\n    data.immunizations         = parsedImmunizations.administered;\r\n    data.immunization_declines = parsedImmunizations.declined;\r\n    data.results               = self.resultsParser.parse(c32);\r\n    data.medications           = self.medicationsParser.parse(c32);\r\n    data.problems              = self.problemsParser.parse(c32);\r\n    data.procedures            = self.proceduresParser.parse(c32);\r\n    data.vitals                = self.vitals.parse(c32);\r\n    \r\n    data.json                       = Core.json;\r\n    data.document.json              = Core.json;\r\n    data.allergies.json             = Core.json;\r\n    data.demographics.json          = Core.json;\r\n    data.encounters.json            = Core.json;\r\n    data.immunizations.json         = Core.json;\r\n    data.immunization_declines.json = Core.json;\r\n    data.results.json               = Core.json;\r\n    data.medications.json           = Core.json;\r\n    data.problems.json              = Core.json;\r\n    data.procedures.json            = Core.json;\r\n    data.vitals.json                = Core.json;\r\n  \r\n    // Sections that are in CCDA but not C32... we want to keep the API\r\n    // consistent, even if the entries are always null\r\n    data.smoking_status = {\r\n      date: null,\r\n      name: null,\r\n      code: null,\r\n      code_system: null,\r\n      code_system_name: null\r\n    };\r\n    data.smoking_status.json = Core.json;\r\n    \r\n    data.chief_complaint = {\r\n      text: null\r\n    };\r\n    data.chief_complaint.json = Core.json;\r\n  \r\n    data.care_plan = [];\r\n    data.care_plan.json = Core.json;\r\n  \r\n    data.instructions = [];\r\n    data.instructions.json = Core.json;\r\n  \r\n    data.functional_statuses = [];\r\n    data.functional_statuses.json = Core.json;\r\n  \r\n    // Decorate each section with Title, templateId and text and adds missing sections\r\n    ParseGenericInfo(c32, data);\r\n  \r\n    return data;\r\n  };\r\n};\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32.js\n// module id = 19\n// module chunks = 0","/*\r\n * Parser for the C32 allergies section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n  \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var allergies = c32.section('allergies');\r\n\r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Allergies\";\r\n    data.templateId = allergies.tag('templateId').attr('root');\r\n    data.text = allergies.tag('text').val(true);\r\n\r\n    allergies.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var start_date = parseDate(el.tag('low').attr('value')),\r\n          end_date = parseDate(el.tag('high').attr('value'));\r\n      \r\n      el = entry.template('2.16.840.1.113883.3.88.11.83.6').tag('code');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName');\r\n      \r\n      // value => reaction_type\r\n      el = entry.template('2.16.840.1.113883.3.88.11.83.6').tag('value');\r\n      var reaction_type_name = el.attr('displayName'),\r\n          reaction_type_code = el.attr('code'),\r\n          reaction_type_code_system = el.attr('codeSystem'),\r\n          reaction_type_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // reaction\r\n      el = entry.template('2.16.840.1.113883.10.20.1.54').tag('value');\r\n      var reaction_name = el.attr('displayName'),\r\n          reaction_code = el.attr('code'),\r\n          reaction_code_system = el.attr('codeSystem');\r\n      \r\n      // an irregularity seen in some c32s\r\n      if (!reaction_name) {\r\n        el = entry.template('2.16.840.1.113883.10.20.1.54').tag('text');\r\n        if (!el.isEmpty()) {\r\n          reaction_name = Core.stripWhitespace(el.val());\r\n        }\r\n      }\r\n\r\n      // severity\r\n      el = entry.template('2.16.840.1.113883.10.20.1.55').tag('value');\r\n      var severity = el.attr('displayName');\r\n      \r\n      // participant => allergen\r\n      el = entry.tag('participant').tag('code');\r\n      var allergen_name = el.attr('displayName'),\r\n          allergen_code = el.attr('code'),\r\n          allergen_code_system = el.attr('codeSystem'),\r\n          allergen_code_system_name = el.attr('codeSystemName');\r\n\r\n      // another irregularity seen in some c32s\r\n      if (!allergen_name) {\r\n        el = entry.tag('participant').tag('name');\r\n        if (!el.isEmpty()) {\r\n          allergen_name = el.val();\r\n        }\r\n      }\r\n      if (!allergen_name) {\r\n        el = entry.template('2.16.840.1.113883.3.88.11.83.6').tag('originalText');\r\n        if (!el.isEmpty()) {\r\n          allergen_name = Core.stripWhitespace(el.val());\r\n        }\r\n      }\r\n      \r\n      // status\r\n      el = entry.template('2.16.840.1.113883.10.20.1.39').tag('value');\r\n      var status = el.attr('displayName');\r\n      \r\n      data.entries.push({\r\n        date_range: {\r\n          start: start_date,\r\n          end: end_date\r\n        },\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name,\r\n        status: status,\r\n        severity: severity,\r\n        reaction: {\r\n          name: reaction_name,\r\n          code: reaction_code,\r\n          code_system: reaction_code_system\r\n        },\r\n        reaction_type: {\r\n          name: reaction_type_name,\r\n          code: reaction_type_code,\r\n          code_system: reaction_type_code_system,\r\n          code_system_name: reaction_type_code_system_name\r\n        },\r\n        allergen: {\r\n          name: allergen_name,\r\n          code: allergen_code,\r\n          code_system: allergen_code_system,\r\n          code_system_name: allergen_code_system_name\r\n        }\r\n      });\r\n    });  \r\n    return data;\r\n  }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/allergies.js\n// module id = 20\n// module chunks = 0","/*\r\n * Parser for the C32 demographics section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var data = {}, el;\r\n    \r\n    var demographics = c32.section('demographics');\r\n    \r\n    var patient = demographics.tag('patientRole');\r\n    el = patient.tag('patient').tag('name');\r\n    var patient_name_dict = parseName(el);\r\n    \r\n    el = patient.tag('patient');\r\n    var dob = parseDate(el.tag('birthTime').attr('value')),\r\n        gender = Core.Codes.gender(el.tag('administrativeGenderCode').attr('code')),\r\n        marital_status = Core.Codes.maritalStatus(el.tag('maritalStatusCode').attr('code'));\r\n    \r\n    el = patient.tag('addr');\r\n    var patient_address_dict = parseAddress(el);\r\n    \r\n    el = patient.tag('telecom');\r\n    var home = el.attr('value'),\r\n        work = null,\r\n        mobile = null;\r\n    \r\n    var email = null;\r\n    \r\n    var language = patient.tag('languageCommunication').tag('languageCode').attr('code'),\r\n        race = patient.tag('raceCode').attr('displayName'),\r\n        ethnicity = patient.tag('ethnicGroupCode').attr('displayName'),\r\n        religion = patient.tag('religiousAffiliationCode').attr('displayName');\r\n    \r\n    el = patient.tag('birthplace');\r\n    var birthplace_dict = parseAddress(el);\r\n    \r\n    el = patient.tag('guardian');\r\n    var guardian_relationship = el.tag('code').attr('displayName'),\r\n      guardian_relationship_code = el.tag('code').attr('code'),\r\n        guardian_home = el.tag('telecom').attr('value');\r\n    \r\n    el = el.tag('guardianPerson').tag('name');\r\n    var guardian_name_dict = parseName(el);\r\n    \r\n    el = patient.tag('guardian').tag('addr');\r\n    var guardian_address_dict = parseAddress(el);\r\n    \r\n    el = patient.tag('providerOrganization');\r\n    var provider_organization = el.tag('name').val(),\r\n        provider_phone = el.tag('telecom').attr('value'),\r\n        provider_address_dict = parseAddress(el.tag('addr'));\r\n    \r\n    data = {\r\n      name: patient_name_dict,\r\n      dob: dob,\r\n      gender: gender,\r\n      marital_status: marital_status,\r\n      address: patient_address_dict,\r\n      phone: {\r\n        home: home,\r\n        work: work,\r\n        mobile: mobile\r\n      },\r\n      email: email,\r\n      language: language,\r\n      race: race,\r\n      ethnicity: ethnicity,\r\n      religion: religion,\r\n      birthplace: {\r\n        state: birthplace_dict.state,\r\n        zip: birthplace_dict.zip,\r\n        country: birthplace_dict.country\r\n      },\r\n      guardian: {\r\n        name: {\r\n          given: guardian_name_dict.given,\r\n          family: guardian_name_dict.family\r\n        },\r\n        relationship: guardian_relationship,\r\n        relationship_code: guardian_relationship_code,\r\n        address: guardian_address_dict,\r\n        phone: {\r\n          home: guardian_home\r\n        }\r\n      },\r\n      provider: {\r\n        organization: provider_organization,\r\n        phone: provider_phone,\r\n        address: provider_address_dict\r\n      }\r\n    };\r\n    \r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/demographics.js\n// module id = 21\n// module chunks = 0","/*\r\n * Parser for the C32 document section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var data = {}, el;\r\n    \r\n    var doc = c32.section('document');\r\n  \r\n    // Parse Doc Type Info\r\n    var templates =  doc.elsByTag('templateId');\r\n    var rootTemplate = templates[0].attr('root');\r\n    var secondTemplate;\r\n    if(templates.length >1)\r\n      secondTemplate = templates[1].attr('root');\r\n    else\r\n      secondTemplate = rootTemplate;\r\n  \r\n    var loinc = doc.tag('code').attr('code');\r\n    var templateId = doc.tag('templateId').attr('root');\r\n    var displayName = doc.tag('code').attr('displayName');\r\n  \r\n    var nonXml = doc.tag('nonXMLBody');\r\n    var nonXmlNodes = nonXml.el.childNodes;\r\n  \r\n    var bodyType = \"structured\";\r\n    var nonXmlBody = {\r\n      type: \"\",\r\n      mediaType: \"\",\r\n      representation: \"\",\r\n      rawText: \"\",\r\n      reference: \"\"\r\n    };\r\n  \r\n    if(nonXmlNodes && nonXmlNodes.length > 0) {\r\n      bodyType = \"unstructured\";\r\n      var text = nonXml.tag('text');\r\n      var mediaType = \"\";\r\n      var representation = \"\";\r\n      var rawText = \"\";\r\n      var reference = \"\";\r\n      var type = \"\";\r\n  \r\n      // We have an embedded doc\r\n      if(text && text.attr('mediaType')) {\r\n        mediaType = text.attr('mediaType');\r\n        representation = text.attr('representation');\r\n        rawText = text.val();\r\n        type = \"embedded\";\r\n      }\r\n  \r\n      if(text && !mediaType) {\r\n        reference = text.tag('reference').attr('value');\r\n        type = \"reference\";\r\n      }\r\n      nonXmlBody = {\r\n        type: type,\r\n        mediaType: mediaType,\r\n        representation: representation,\r\n        rawText: rawText,\r\n        reference: reference\r\n      }\r\n    }\r\n  \r\n    var docType = {\r\n      type: \"CCDAR2\",\r\n      rootTemplateId: rootTemplate,\r\n      templateId: secondTemplate,\r\n      displayName: displayName,\r\n      loinc: loinc,\r\n      bodyType: bodyType,\r\n      nonXmlBody: nonXmlBody\r\n    };\r\n    \r\n    var date = parseDate(doc.tag('effectiveTime').attr('value'));\r\n    var title = Core.stripWhitespace(doc.tag('title').val());\r\n    \r\n    var author = doc.tag('author');\r\n    el = author.tag('assignedPerson').tag('name');\r\n    var name_dict = parseName(el);\r\n    // Sometimes C32s include names that are just like <name>String</name>\r\n    // and we still want to get something out in that case\r\n    if (!name_dict.prefix && !name_dict.given.length && !name_dict.family) {\r\n     name_dict.family = el.val();\r\n    }\r\n    \r\n    el = author.tag('addr');\r\n    var address_dict = parseAddress(el);\r\n    \r\n    el = author.tag('telecom');\r\n    var work_phone = el.attr('value');\r\n  \r\n    var documentation_of_list = [];\r\n    var performers = doc.tag('documentationOf').elsByTag('performer');\r\n    for (var i = 0; i < performers.length; i++) {\r\n      el = performers[i].tag('assignedPerson').tag('name');\r\n      var performer_name_dict = parseName(el);\r\n      var performer_phone = performers[i].tag('telecom').attr('value');\r\n      var performer_addr = parseAddress(el.tag('addr'));\r\n      documentation_of_list.push({\r\n        name: performer_name_dict,\r\n        phone: {\r\n          work: performer_phone\r\n        },\r\n        address: performer_addr\r\n      });\r\n    }\r\n  \r\n    el = doc.tag('encompassingEncounter');\r\n    var location_name = Core.stripWhitespace(el.tag('name').val());\r\n    var location_addr_dict = parseAddress(el.tag('addr'));\r\n    \r\n    var encounter_date = null;\r\n    el = el.tag('effectiveTime');\r\n    if (!el.isEmpty()) {\r\n      encounter_date = parseDate(el.attr('value'));\r\n    }\r\n    \r\n    data = {\r\n      type: docType,\r\n      date: date,\r\n      title: title,\r\n      author: {\r\n        name: name_dict,\r\n        address: address_dict,\r\n        phone: {\r\n          work: work_phone\r\n        }\r\n      },\r\n      documentation_of: documentation_of_list,\r\n      location: {\r\n        name: location_name,\r\n        address: location_addr_dict,\r\n        encounter_date: encounter_date\r\n      }\r\n    };\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/document.js\n// module id = 22\n// module chunks = 0","/*\r\n * Parser for the C32 encounters section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var encounters = c32.section('encounters');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Encounters\";\r\n    data.templateId = encounters.tag('templateId').attr('root');\r\n    data.text = encounters.tag('text').val(true);\r\n  \r\n    encounters.entries().each(function(entry) {\r\n      \r\n      var date = parseDate(entry.tag('effectiveTime').attr('value'));\r\n      if (!date) {\r\n        date = parseDate(entry.tag('effectiveTime').tag('low').attr('value'));\r\n      }\r\n      \r\n      el = entry.tag('code');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName'),\r\n          code_system_version = el.attr('codeSystemVersion');\r\n      \r\n      // translation\r\n      el = entry.tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // performer\r\n      el = entry.tag('performer');\r\n      var performer_name = el.tag('name').val(),\r\n          performer_code = el.attr('code'),\r\n          performer_code_system = el.attr('codeSystem'),\r\n          performer_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // participant => location\r\n      el = entry.tag('participant');\r\n      var organization = el.tag('name').val(),\r\n          location_dict = parseAddress(el);\r\n      location_dict.organization = organization;\r\n  \r\n      // findings\r\n      var findings = [];\r\n      var findingEls = entry.elsByTag('entryRelationship');\r\n      for (var i = 0; i < findingEls.length; i++) {\r\n        el = findingEls[i].tag('value');\r\n        findings.push({\r\n          name: el.attr('displayName'),\r\n          code: el.attr('code'),\r\n          code_system: el.attr('codeSystem')\r\n        });\r\n      }\r\n      \r\n      data.entries.push({\r\n        date: date,\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name,\r\n        code_system_version: code_system_version,\r\n        findings: findings,\r\n        translation: {\r\n          name: translation_name,\r\n          code: translation_code,\r\n          code_system: translation_code_system,\r\n          code_system_name: translation_code_system_name\r\n        },\r\n        performer: {\r\n          name: performer_name,\r\n          code: performer_code,\r\n          code_system: performer_code_system,\r\n          code_system_name: performer_code_system_name\r\n        },\r\n        location: location_dict\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/encounters.js\n// module id = 23\n// module chunks = 0","/*\r\n * Parser for the C32 immunizations section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var administeredData = {}, declinedData = {}, product, el;\r\n  \r\n    var immunizations = c32.section('immunizations');\r\n  \r\n    administeredData.entries = [];\r\n    administeredData.displayName = \"Immunizations\";\r\n    administeredData.templateId = immunizations.tag('templateId').attr('root');\r\n    administeredData.text = immunizations.tag('text').val(true);\r\n  \r\n    declinedData.entries = [];\r\n    declinedData.displayName = \"Immunizations Declined\";\r\n    declinedData.templateId = immunizations.tag('templateId').attr('root');\r\n    declinedData.text = immunizations.tag('text').val(true);\r\n  \r\n  \r\n    \r\n    immunizations.entries().each(function(entry) {\r\n      \r\n      // date\r\n      el = entry.tag('effectiveTime');\r\n      var date = parseDate(el.attr('value'));\r\n      if (!date) {\r\n        date = parseDate(el.tag('low').attr('value'));\r\n      }\r\n  \r\n      // if 'declined' is true, this is a record that this vaccine WASN'T administered\r\n      el = entry.tag('substanceAdministration');\r\n      var declined = el.boolAttr('negationInd');\r\n  \r\n      // product\r\n      product = entry.template('2.16.840.1.113883.10.20.1.53');\r\n      el = product.tag('code');\r\n      var product_name = el.attr('displayName'),\r\n          product_code = el.attr('code'),\r\n          product_code_system = el.attr('codeSystem'),\r\n          product_code_system_name = el.attr('codeSystemName');\r\n  \r\n      // translation\r\n      el = product.tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n  \r\n      // misc product details\r\n      el = product.tag('lotNumberText');\r\n      var lot_number = el.val();\r\n  \r\n      el = product.tag('manufacturerOrganization');\r\n      var manufacturer_name = el.tag('name').val();\r\n      \r\n      // route\r\n      el = entry.tag('routeCode');\r\n      var route_name = el.attr('displayName'),\r\n          route_code = el.attr('code'),\r\n          route_code_system = el.attr('codeSystem'),\r\n          route_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // instructions\r\n      el = entry.template('2.16.840.1.113883.10.20.1.49');\r\n      var instructions_text = Core.stripWhitespace(el.tag('text').val());\r\n      el = el.tag('code');\r\n      var education_name = el.attr('displayName'),\r\n          education_code = el.attr('code'),\r\n          education_code_system = el.attr('codeSystem');\r\n  \r\n      // dose\r\n      el = entry.tag('doseQuantity');\r\n      var dose_value = el.attr('value'),\r\n          dose_unit = el.attr('unit');\r\n      \r\n      var data = (declined) ? declinedData : administeredData;\r\n      data.entries.push({\r\n        date: date,\r\n        product: {\r\n          name: product_name,\r\n          code: product_code,\r\n          code_system: product_code_system,\r\n          code_system_name: product_code_system_name,\r\n          translation: {\r\n            name: translation_name,\r\n            code: translation_code,\r\n            code_system: translation_code_system,\r\n            code_system_name: translation_code_system_name\r\n          },\r\n          lot_number: lot_number,\r\n          manufacturer_name: manufacturer_name\r\n        },\r\n        dose_quantity: {\r\n          value: dose_value,\r\n          unit: dose_unit\r\n        },\r\n        route: {\r\n          name: route_name,\r\n          code: route_code,\r\n          code_system: route_code_system,\r\n          code_system_name: route_code_system_name\r\n        },\r\n        instructions: instructions_text,\r\n        education_type: {\r\n          name: education_name,\r\n          code: education_code,\r\n          code_system: education_code_system\r\n        }\r\n      });\r\n    });\r\n    \r\n    return {\r\n      administered: administeredData,\r\n      declined: declinedData\r\n    };\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/immunizations.js\n// module id = 24\n// module chunks = 0","var Core = require('../../core');\r\n\r\n/*\r\n * Parser for the C32 medications section\r\n */\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n  \r\n  function parse(c32) {    \r\n    var parseDate = self.doc.parseDate;\r\n    var medications = c32.section('medications');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Medications\";\r\n    data.templateId = medications.tag('templateId').attr('root');\r\n    data.text = medications.tag('text').val(true);\r\n    \r\n    medications.entries().each(function(entry) {\r\n  \r\n      var text = null;\r\n      el = entry.tag('substanceAdministration').immediateChildTag('text');\r\n      if (!el.isEmpty()) {\r\n        // technically C32s don't use this, but C83s (another CCD) do,\r\n        // and CCDAs do, so we may see it anyways\r\n        text = Core.stripWhitespace(el.val());\r\n      }\r\n  \r\n      var effectiveTimes = entry.elsByTag('effectiveTime');\r\n  \r\n      el = effectiveTimes[0]; // the first effectiveTime is the med start date\r\n      var start_date = null, end_date = null;\r\n      if (el) {\r\n        start_date = parseDate(el.tag('low').attr('value'));\r\n        end_date = parseDate(el.tag('high').attr('value'));\r\n      }\r\n  \r\n      // the second effectiveTime might the schedule period or it might just\r\n      // be a random effectiveTime from further in the entry... xsi:type should tell us\r\n      el = effectiveTimes[1];\r\n      var schedule_type = null, schedule_period_value = null, schedule_period_unit = null;\r\n      if (el && el.attr('xsi:type') === 'PIVL_TS') {\r\n        var institutionSpecified = el.attr('institutionSpecified');\r\n        if (institutionSpecified === 'true') {\r\n          schedule_type= 'frequency';\r\n        } else if (institutionSpecified === 'false') {\r\n          schedule_type = 'interval';\r\n        }\r\n  \r\n        el = el.tag('period');\r\n        schedule_period_value = el.attr('value');\r\n        schedule_period_unit = el.attr('unit');\r\n      }\r\n      \r\n      el = entry.tag('manufacturedProduct').tag('code');\r\n      var product_name = el.attr('displayName'),\r\n          product_code = el.attr('code'),\r\n          product_code_system = el.attr('codeSystem');\r\n  \r\n      var product_original_text = null;\r\n      el = entry.tag('manufacturedProduct').tag('originalText');\r\n      if (!el.isEmpty()) {\r\n        product_original_text = Core.stripWhitespace(el.val());\r\n      }\r\n      // if we don't have a product name yet, try the originalText version\r\n      if (!product_name && product_original_text) {\r\n        product_name = product_original_text;\r\n      }\r\n  \r\n      // irregularity in some c32s\r\n      if (!product_name) {\r\n        el = entry.tag('manufacturedProduct').tag('name');\r\n        if (!el.isEmpty()) {\r\n          product_name = Core.stripWhitespace(el.val());\r\n        }\r\n      }\r\n      \r\n      el = entry.tag('manufacturedProduct').tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n      el = entry.tag('doseQuantity');\r\n      var dose_value = el.attr('value'),\r\n          dose_unit = el.attr('unit');\r\n      \r\n      el = entry.tag('rateQuantity');\r\n      var rate_quantity_value = el.attr('value'),\r\n          rate_quantity_unit = el.attr('unit');\r\n      \r\n      el = entry.tag('precondition').tag('value');\r\n      var precondition_name = el.attr('displayName'),\r\n          precondition_code = el.attr('code'),\r\n          precondition_code_system = el.attr('codeSystem');\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.1.28').tag('value');\r\n      var reason_name = el.attr('displayName'),\r\n          reason_code = el.attr('code'),\r\n          reason_code_system = el.attr('codeSystem');\r\n      \r\n      el = entry.tag('routeCode');\r\n      var route_name = el.attr('displayName'),\r\n          route_code = el.attr('code'),\r\n          route_code_system = el.attr('codeSystem'),\r\n          route_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // participant/playingEntity => vehicle\r\n      el = entry.tag('participant').tag('playingEntity');\r\n      var vehicle_name = el.tag('name').val();\r\n  \r\n      el = el.tag('code');\r\n      // prefer the code vehicle_name but fall back to the non-coded one\r\n      // (which for C32s is in fact the primary field for this info)\r\n      vehicle_name = el.attr('displayName') || vehicle_name;\r\n      var vehicle_code = el.attr('code'),\r\n          vehicle_code_system = el.attr('codeSystem'),\r\n          vehicle_code_system_name = el.attr('codeSystemName');\r\n      \r\n      el = entry.tag('administrationUnitCode');\r\n      var administration_name = el.attr('displayName'),\r\n          administration_code = el.attr('code'),\r\n          administration_code_system = el.attr('codeSystem'),\r\n          administration_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // performer => prescriber\r\n      el = entry.tag('performer');\r\n      var prescriber_organization = el.tag('name').val(),\r\n          prescriber_person = null;\r\n      \r\n      data.entries.push({\r\n        date_range: {\r\n          start: start_date,\r\n          end: end_date\r\n        },\r\n        text: text,\r\n        product: {\r\n          name: product_name,\r\n          text: product_original_text,\r\n          code: product_code,\r\n          code_system: product_code_system,\r\n          translation: {\r\n            name: translation_name,\r\n            code: translation_code,\r\n            code_system: translation_code_system,\r\n            code_system_name: translation_code_system_name\r\n          }\r\n        },\r\n        dose_quantity: {\r\n          value: dose_value,\r\n          unit: dose_unit\r\n        },\r\n        rate_quantity: {\r\n          value: rate_quantity_value,\r\n          unit: rate_quantity_unit\r\n        },\r\n        precondition: {\r\n          name: precondition_name,\r\n          code: precondition_code,\r\n          code_system: precondition_code_system\r\n        },\r\n        reason: {\r\n          name: reason_name,\r\n          code: reason_code,\r\n          code_system: reason_code_system\r\n        },\r\n        route: {\r\n          name: route_name,\r\n          code: route_code,\r\n          code_system: route_code_system,\r\n          code_system_name: route_code_system_name\r\n        },\r\n        schedule: {\r\n          type: schedule_type,\r\n          period_value: schedule_period_value,\r\n          period_unit: schedule_period_unit\r\n        },\r\n        vehicle: {\r\n          name: vehicle_name,\r\n          code: vehicle_code,\r\n          code_system: vehicle_code_system,\r\n          code_system_name: vehicle_code_system_name\r\n        },\r\n        administration: {\r\n          name: administration_name,\r\n          code: administration_code,\r\n          code_system: administration_code_system,\r\n          code_system_name: administration_code_system_name\r\n        },\r\n        prescriber: {\r\n          organization: prescriber_organization,\r\n          person: prescriber_person\r\n        }\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/medications.js\n// module id = 25\n// module chunks = 0","var Core = require('../../core');\r\n\r\n/*\r\n * Parser for the C32 problems section\r\n */\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var problems = c32.section('problems');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Problems\";\r\n    data.templateId = problems.tag('templateId').attr('root');\r\n    data.text = problems.tag('text').val(true);\r\n  \r\n    problems.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var start_date = parseDate(el.tag('low').attr('value')),\r\n          end_date = parseDate(el.tag('high').attr('value'));\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.1.28').tag('value');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName');\r\n  \r\n      // Pre-C32 CCDs put the problem name in this \"originalText\" field, and some vendors\r\n      // continue doing this with their C32, even though it's not technically correct\r\n      if (!name) {\r\n        el = entry.template('2.16.840.1.113883.10.20.1.28').tag('originalText');\r\n        if (!el.isEmpty()) {\r\n          name = Core.stripWhitespace(el.val());\r\n        }\r\n      }\r\n  \r\n      el = entry.template('2.16.840.1.113883.10.20.1.28').tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.1.50');\r\n      var status = el.tag('value').attr('displayName');\r\n      \r\n      var age = null;\r\n      el = entry.template('2.16.840.1.113883.10.20.1.38');\r\n      if (!el.isEmpty()) {\r\n        age = parseFloat(el.tag('value').attr('value'));\r\n      }\r\n      \r\n      data.entries.push({\r\n        date_range: {\r\n          start: start_date,\r\n          end: end_date\r\n        },\r\n        name: name,\r\n        status: status,\r\n        age: age,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name,\r\n        translation: {\r\n          name: translation_name,\r\n          code: translation_code,\r\n          code_system: translation_code_system,\r\n          code_system_name: translation_code_system_name\r\n        },\r\n        comment: null // not part of C32\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/problems.js\n// module id = 26\n// module chunks = 0","/*\r\n * Parser for the C32 procedures section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var procedures = c32.section('procedures');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Procedures\";\r\n    data.templateId = procedures.tag('templateId').attr('root');\r\n    data.text = procedures.tag('text').val(true);\r\n    \r\n    procedures.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var date = parseDate(el.attr('value'));\r\n      \r\n      el = entry.tag('code');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem');\r\n  \r\n      if (!name) {\r\n        name = Core.stripWhitespace(entry.tag('originalText').val());\r\n      }\r\n      \r\n      // 'specimen' tag not always present\r\n      el = entry.tag('specimen').tag('code');\r\n      var specimen_name = el.attr('displayName'),\r\n          specimen_code = el.attr('code'),\r\n          specimen_code_system = el.attr('codeSystem');\r\n      \r\n      el = entry.tag('performer').tag('addr');\r\n      var organization = el.tag('name').val(),\r\n          phone = el.tag('telecom').attr('value');\r\n      \r\n      var performer_dict = parseAddress(el);\r\n      performer_dict.organization = organization;\r\n      performer_dict.phone = phone;\r\n      \r\n      // participant => device\r\n      el = entry.tag('participant').tag('code');\r\n      var device_name = el.attr('displayName'),\r\n          device_code = el.attr('code'),\r\n          device_code_system = el.attr('codeSystem');\r\n      \r\n      data.entries.push({\r\n        date: date,\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        specimen: {\r\n          name: specimen_name,\r\n          code: specimen_code,\r\n          code_system: specimen_code_system\r\n        },\r\n        performer: performer_dict,\r\n        device: {\r\n          name: device_name,\r\n          code: device_code,\r\n          code_system: device_code_system\r\n        }\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/procedures.js\n// module id = 27\n// module chunks = 0","/*\r\n * Parser for the C32 results (labs) section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var results = c32.section('results');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Results\";\r\n    data.templateId = results.tag('templateId').attr('root');\r\n    data.text = results.tag('text').val(true);\r\n  \r\n  \r\n    results.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var panel_date = parseDate(entry.tag('effectiveTime').attr('value'));\r\n      if (!panel_date) {\r\n        panel_date = parseDate(entry.tag('effectiveTime').tag('low').attr('value'));\r\n      }\r\n      \r\n      // panel\r\n      el = entry.tag('code');\r\n      var panel_name = el.attr('displayName'),\r\n          panel_code = el.attr('code'),\r\n          panel_code_system = el.attr('codeSystem'),\r\n          panel_code_system_name = el.attr('codeSystemName');\r\n      \r\n      var observation;\r\n      var tests = entry.elsByTag('observation');\r\n      var tests_data = [];\r\n      \r\n      for (var i = 0; i < tests.length; i++) {\r\n        observation = tests[i];\r\n        \r\n        // sometimes results organizers contain non-results. we only want tests\r\n        if (observation.template('2.16.840.1.113883.10.20.1.31').val()) {\r\n          var date = parseDate(observation.tag('effectiveTime').attr('value'));\r\n          \r\n          el = observation.tag('code');\r\n          var name = el.attr('displayName'),\r\n              code = el.attr('code'),\r\n              code_system = el.attr('codeSystem'),\r\n              code_system_name = el.attr('codeSystemName');\r\n  \r\n          if (!name) {\r\n            name = Core.stripWhitespace(observation.tag('text').val());\r\n          }\r\n      \r\n          el = observation.tag('translation');\r\n          var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n          el = observation.tag('value');\r\n          var value = el.attr('value'),\r\n              unit = el.attr('unit');\r\n          // We could look for xsi:type=\"PQ\" (physical quantity) but it seems better\r\n          // not to trust that that field has been used correctly...\r\n          if (value && !isNaN(parseFloat(value))) {\r\n            value = parseFloat(value);\r\n          }\r\n          if (!value) {\r\n            value = el.val(); // look for free-text values\r\n          }\r\n      \r\n          el = observation.tag('referenceRange');\r\n          var reference_range_text = Core.stripWhitespace(el.tag('observationRange').tag('text').val()),\r\n              reference_range_low_unit = el.tag('observationRange').tag('low').attr('unit'),\r\n              reference_range_low_value = el.tag('observationRange').tag('low').attr('value'),\r\n              reference_range_high_unit = el.tag('observationRange').tag('high').attr('unit'),\r\n              reference_range_high_value = el.tag('observationRange').tag('high').attr('value');\r\n          \r\n          tests_data.push({\r\n            date: date,\r\n            name: name,\r\n            value: value,\r\n            unit: unit,\r\n            code: code,\r\n            code_system: code_system,\r\n            code_system_name: code_system_name,\r\n            translation: {\r\n              name: translation_name,\r\n              code: translation_code,\r\n              code_system: translation_code_system,\r\n              code_system_name: translation_code_system_name\r\n            },\r\n            reference_range: {\r\n              text: reference_range_text,\r\n              low_unit: reference_range_low_unit,\r\n              low_value: reference_range_low_value,\r\n              high_unit: reference_range_high_unit,\r\n              high_value: reference_range_high_value,\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      data.entries.push({\r\n        name: panel_name,\r\n        code: panel_code,\r\n        code_system: panel_code_system,\r\n        code_system_name: panel_code_system_name,\r\n        date: panel_date,\r\n        tests: tests_data\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };  \r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/results.js\n// module id = 28\n// module chunks = 0","/*\r\n * Parser for the C32 vitals section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.parse = parse;\r\n\r\n  function parse(c32) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var vitals = c32.section('vitals');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Vitals\";\r\n    data.templateId = vitals.tag('templateId').attr('root');\r\n    data.text = vitals.tag('text').val(true);\r\n    \r\n    vitals.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var entry_date = parseDate(el.attr('value'));\r\n      \r\n      var result;\r\n      var results = entry.elsByTag('component');\r\n      var results_data = [];\r\n      \r\n      for (var j = 0; j < results.length; j++) {\r\n        result = results[j];\r\n        \r\n        // Results\r\n        \r\n        el = result.tag('code');\r\n        var name = el.attr('displayName'),\r\n            code = el.attr('code'),\r\n            code_system = el.attr('codeSystem'),\r\n            code_system_name = el.attr('codeSystemName');\r\n        \r\n        el = result.tag('value');\r\n        var value = parseFloat(el.attr('value')),\r\n            unit = el.attr('unit');\r\n        \r\n        results_data.push({\r\n          name: name,\r\n          code: code,\r\n          code_system: code_system,\r\n          code_system_name: code_system_name,\r\n          value: value,\r\n          unit: unit\r\n        });\r\n      }\r\n      \r\n      data.entries.push({\r\n        date: entry_date,\r\n        results: results_data\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/c32/vitals.js\n// module id = 29\n// module chunks = 0","/*\r\n * Parser for the CCDAR2 document\r\n */\r\n\r\nvar ParseGenericInfo = require('./generic');\r\nvar Core = require('../core');\r\nvar DocumentParser = require('./ccd/document');\r\nvar DemographicsParser = require('./ccda/demographics');\r\nvar HealthConcernsParser = require('./ccdar2/health_concerns');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.documentParser = new DocumentParser(self.doc);\r\n  self.demographicsParser = new DemographicsParser(self.doc);\r\n  self.healthConcernsParser = new HealthConcernsParser(self.doc);\r\n  \r\n  self.run = function (ccda) {\r\n    var data = {};\r\n\r\n    data.document              = self.documentParser.document(ccda);\r\n    data.demographics          = self.demographicsParser.demographics(ccda);\r\n    data.health_concerns_document  = self.healthConcernsParser.health_concerns_document(ccda);\r\n    data.json                  = Core.json;\r\n\r\n    // Decorate each section with Title, templateId and text and adds missing sections\r\n    ParseGenericInfo(ccda, data);\r\n\r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccd.js\n// module id = 30\n// module chunks = 0","/*\r\n * Parser for the CCDAR2 document section\r\n */\r\nvar Core = require('../../core');\r\n\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.document = document;\r\n\r\n  function document(ccda) {\r\n    \r\n      var parseDate = self.doc.parseDate;\r\n      var parseName = self.doc.parseName;\r\n      var parseAddress = self.doc.parseAddress;\r\n      var data = {}, el;\r\n    \r\n      var doc = ccda.section('document');\r\n      var date = parseDate(doc.tag('effectiveTime').attr('value'));\r\n      var title = Core.stripWhitespace(doc.tag('title').val());\r\n    \r\n      // Parse Doc Type Info\r\n      var templates =  doc.elsByTag('templateId');\r\n      \r\n      var rootTemplate = templates[0].attr('root');\r\n      var secondTemplate;\r\n      if(templates.length >1)\r\n        secondTemplate = templates[1].attr('root');\r\n      else\r\n        secondTemplate = rootTemplate;\r\n    \r\n      var loinc = doc.tag('code').attr('code');\r\n      var templateId = doc.tag('templateId').attr('root');\r\n      var displayName = doc.tag('code').attr('displayName');\r\n    \r\n      var nonXml = doc.tag('nonXMLBody');\r\n      var nonXmlNodes = nonXml.el.childNodes;\r\n    \r\n      var bodyType = \"structured\";\r\n      var nonXmlBody = {\r\n        type: \"\",\r\n        mediaType: \"\",\r\n        representation: \"\",\r\n        rawText: \"\",\r\n        reference: \"\"\r\n      };\r\n      if(nonXmlNodes && nonXmlNodes.length > 0) {\r\n        bodyType = \"unstructured\";\r\n        var text = nonXml.tag('text');\r\n        var mediaType = \"\";\r\n        var representation = \"\";\r\n        var rawText = \"\";\r\n        var reference = \"\";\r\n        var type = \"\";\r\n    \r\n        // We have an embedded doc\r\n        if(text && text.attr('mediaType')) {\r\n          mediaType = text.attr('mediaType');\r\n          representation = text.attr('representation');\r\n          rawText = text.val();\r\n          type = \"embedded\";\r\n        }\r\n    \r\n        if(text && !mediaType) {\r\n          reference = text.tag('reference').attr('value');\r\n          type = \"reference\";\r\n        }\r\n        nonXmlBody = {\r\n          type: type,\r\n          mediaType: mediaType,\r\n          representation: representation,\r\n          rawText: rawText,\r\n          reference: reference\r\n        }\r\n      }\r\n    \r\n      var docType = {\r\n        type: \"CCDAR2\",\r\n        rootTemplateId: rootTemplate,\r\n        templateId: secondTemplate,\r\n        displayName: displayName,\r\n        loinc: loinc,\r\n        bodyType: bodyType,\r\n        nonXmlBody: nonXmlBody\r\n      };\r\n    \r\n      var author = doc.tag('author');\r\n      el = author.tag('assignedPerson').tag('name');\r\n      var name_dict = parseName(el);\r\n    \r\n      el = author.tag('addr');\r\n      var address_dict = parseAddress(el);\r\n    \r\n      el = author.tag('telecom');\r\n      var work_phone = el.attr('value');\r\n    \r\n      var documentation_of_list = [];\r\n      var performers = doc.tag('documentationOf').elsByTag('performer');\r\n      for (var i = 0; i < performers.length; i++) {\r\n        el = performers[i];\r\n        var performer_name_dict = parseName(el);\r\n        var performer_phone = el.tag('telecom').attr('value');\r\n        var performer_addr = parseAddress(el.tag('addr'));\r\n        documentation_of_list.push({\r\n          name: performer_name_dict,\r\n          phone: {\r\n            work: performer_phone\r\n          },\r\n          address: performer_addr\r\n        });\r\n      }\r\n    \r\n      el = doc.tag('encompassingEncounter').tag('location');\r\n      var location_name = Core.stripWhitespace(el.tag('name').val());\r\n      var location_addr_dict = parseAddress(el.tag('addr'));\r\n    \r\n      var encounter_date = null;\r\n      el = el.tag('effectiveTime');\r\n      if (!el.isEmpty()) {\r\n        encounter_date = parseDate(el.attr('value'));\r\n      }\r\n    \r\n      data = {\r\n        type: docType,\r\n        date: date,\r\n        title: title,\r\n        author: {\r\n          name: name_dict,\r\n          address: address_dict,\r\n          phone: {\r\n            work: work_phone\r\n          }\r\n        },\r\n        documentation_of: documentation_of_list,\r\n        location: {\r\n          name: location_name,\r\n          address: location_addr_dict,\r\n          encounter_date: encounter_date\r\n        }\r\n      };\r\n    \r\n      return data;\r\n    };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccd/document.js\n// module id = 31\n// module chunks = 0","var Core = require('../core');\r\nvar AllergiesParser = require('./ccda/allergies');\r\nvar CarePlanParser = require('./ccda/care_plan');\r\nvar DemographicsParser = require('./ccda/demographics');\r\nvar DocumentParser = require('./ccda/document');\r\nvar EncountersParser = require('./ccda/encounters');\r\nvar FreeTextParser = require('./ccda/free_text');\r\nvar FunctionalStatusesParser = require('./ccda/functional_statuses');\r\nvar ImmunizationsParser = require('./ccda/immunizations');\r\nvar InstructionsParser = require('./ccda/instructions');\r\nvar MedicationsParser = require('./ccda/medications');\r\nvar ProblemsParser = require('./ccda/problems');\r\nvar ProceduresParser = require('./ccda/procedures');\r\nvar ResultsParser = require('./ccda/results');\r\nvar SmokingStatusParser = require('./ccda/smoking_status');\r\nvar VitalsParser = require('./ccda/vitals');\r\n\r\nvar ParseGenericInfo = require('./generic');\r\n\r\n/*\r\n * Parser for the CCDA document\r\n */\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.allergiesParser = new AllergiesParser(self.doc);\r\n  self.carePlanParser = new CarePlanParser(self.doc);\r\n  self.demographicsParser = new DemographicsParser(self.doc);\r\n  self.documentParser = new DocumentParser(self.doc);\r\n  self.encountersParser = new EncountersParser(self.doc);\r\n  self.freeTextParser = new FreeTextParser();\r\n  self.functionalStatusesParser = new FunctionalStatusesParser(self.doc);\r\n  self.immunizationsParser = new ImmunizationsParser(self.doc);\r\n  self.instructionsParser = new InstructionsParser();\r\n  self.medicationsParser = new MedicationsParser(self.doc);\r\n  self.problemsParser = new ProblemsParser(self.doc);\r\n  self.proceduresParser = new ProceduresParser(self.doc);\r\n  self.resultsParser = new ResultsParser(self.doc);\r\n  self.smokingStatusParser = new SmokingStatusParser(self.doc);\r\n  self.vitalsParser = new VitalsParser(self.doc);\r\n\r\n\r\n  self.run = function (ccda) {\r\n    var data = {};\r\n    \r\n    data.document              = self.documentParser.document(ccda);\r\n    data.allergies             = self.allergiesParser.allergies(ccda);\r\n    data.care_plan             = self.carePlanParser.care_plan(ccda);\r\n    data.chief_complaint       = self.freeTextParser.free_text(ccda, 'chief_complaint');\r\n    data.demographics          = self.demographicsParser.demographics(ccda);\r\n    data.encounters            = self.encountersParser.encounters(ccda);\r\n    data.functional_statuses   = self.functionalStatusesParser.functional_statuses(ccda);\r\n    var parsedImmunizations    = self.immunizationsParser.immunizations(ccda);\r\n    data.immunizations         = parsedImmunizations.administered;\r\n    data.immunization_declines = parsedImmunizations.declined;\r\n    data.instructions          = self.instructionsParser.instructions(ccda);\r\n    data.results               = self.resultsParser.results(ccda);\r\n    data.medications           = self.medicationsParser.medications(ccda);\r\n    data.problems              = self.problemsParser.problems(ccda);\r\n    data.procedures            = self.proceduresParser.procedures(ccda);\r\n    data.smoking_status        = self.smokingStatusParser.smoking_status(ccda);\r\n    data.vitals                = self.vitalsParser.vitals(ccda);\r\n    \r\n    data.json                        = Core.json;\r\n    data.document.json               = Core.json;\r\n    data.allergies.json              = Core.json;\r\n    data.care_plan.json              = Core.json;\r\n    data.chief_complaint.json        = Core.json;\r\n    data.demographics.json           = Core.json;\r\n    data.encounters.json             = Core.json;\r\n    data.functional_statuses.json    = Core.json;\r\n    data.immunizations.json          = Core.json;\r\n    data.immunization_declines.json  = Core.json;\r\n    data.instructions.json           = Core.json;\r\n    data.results.json                = Core.json;\r\n    data.medications.json            = Core.json;\r\n    data.problems.json               = Core.json;\r\n    data.procedures.json             = Core.json;\r\n    data.smoking_status.json         = Core.json;\r\n    data.vitals.json                 = Core.json;\r\n\r\n    // Decorate each section with Title, templateId and text and adds missing sections\r\n    ParseGenericInfo(ccda, data);\r\n\r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda.js\n// module id = 32\n// module chunks = 0","/*\r\n * Parser for the CCDA allergies section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  \r\n  self.allergies = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var allergies = ccda.section('allergies');\r\n  \r\n      var data = {}, el;\r\n      data.entries = [];\r\n      data.displayName = \"Allergies\";\r\n      data.templateId = allergies.tag('templateId').attr('root');\r\n      data.text = allergies.tag('text').val(true);\r\n    \r\n    allergies.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var start_date = parseDate(el.tag('low').attr('value')),\r\n          end_date = parseDate(el.tag('high').attr('value'));\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.7').tag('code');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName');\r\n      \r\n      // value => reaction_type\r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.7').tag('value');\r\n      var reaction_type_name = el.attr('displayName'),\r\n          reaction_type_code = el.attr('code'),\r\n          reaction_type_code_system = el.attr('codeSystem'),\r\n          reaction_type_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // reaction\r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.9').tag('value');\r\n      var reaction_name = el.attr('displayName'),\r\n          reaction_code = el.attr('code'),\r\n          reaction_code_system = el.attr('codeSystem');\r\n      \r\n      // severity\r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.8').tag('value');\r\n      var severity = el.attr('displayName');\r\n      \r\n      // participant => allergen\r\n      el = entry.tag('participant').tag('code');\r\n      var allergen_name = el.attr('displayName'),\r\n          allergen_code = el.attr('code'),\r\n          allergen_code_system = el.attr('codeSystem'),\r\n          allergen_code_system_name = el.attr('codeSystemName');\r\n  \r\n      // this is not a valid place to store the allergen name but some vendors use it\r\n      if (!allergen_name) {\r\n        el = entry.tag('participant').tag('name');\r\n        if (!el.isEmpty()) {\r\n          allergen_name = el.val();\r\n        }\r\n      }\r\n      if (!allergen_name) {\r\n        el = entry.template('2.16.840.1.113883.10.20.22.4.7').tag('originalText');\r\n        if (!el.isEmpty()) {\r\n          allergen_name = Core.stripWhitespace(el.val());\r\n        }\r\n      }\r\n      \r\n      // status\r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.28').tag('value');\r\n      var status = el.attr('displayName');\r\n      \r\n      data.entries.push({\r\n        date_range: {\r\n          start: start_date,\r\n          end: end_date\r\n        },\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name,\r\n        status: status,\r\n        severity: severity,\r\n        reaction: {\r\n          name: reaction_name,\r\n          code: reaction_code,\r\n          code_system: reaction_code_system\r\n        },\r\n        reaction_type: {\r\n          name: reaction_type_name,\r\n          code: reaction_type_code,\r\n          code_system: reaction_type_code_system,\r\n          code_system_name: reaction_type_code_system_name\r\n        },\r\n        allergen: {\r\n          name: allergen_name,\r\n          code: allergen_code,\r\n          code_system: allergen_code_system,\r\n          code_system_name: allergen_code_system_name\r\n        }\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/allergies.js\n// module id = 33\n// module chunks = 0","/*\r\n * Parser for the CCDA \"plan of care\" section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n    var self = this;\r\n    self.doc = doc;\r\n\r\n    self.care_plan = function (ccda) {        \r\n        var data = [], el;\r\n    \r\n        var data = {}, el;\r\n        care_plan = ccda.section('care_plan');\r\n        data.entries = [];\r\n        data.displayName = \"Care Plan\";\r\n        data.templateId = care_plan.tag('templateId').attr('root');\r\n        data.text = care_plan.tag('text').val(true);\r\n    \r\n        care_plan.entries().each(function (entry) {\r\n    \r\n            var name = null,\r\n                code = null,\r\n                code_system = null,\r\n                code_system_name = null;\r\n    \r\n            // Plan of care encounters, which have no other details\r\n            el = entry.template('2.16.840.1.113883.10.20.22.4.40');\r\n            if (!el.isEmpty()) {\r\n                name = 'encounter';\r\n            } else {\r\n                el = entry.tag('code');\r\n    \r\n                name = el.attr('displayName');\r\n                code = el.attr('code');\r\n                code_system = el.attr('codeSystem');\r\n                code_system_name = el.attr('codeSystemName');\r\n            }\r\n    \r\n            var text = Core.stripWhitespace(entry.tag('text').val(true));\r\n            var time = entry.tag('effectiveTime').immediateChildTag('center').attr('value');\r\n    \r\n            data.entries.push({\r\n                text: text,\r\n                name: name,\r\n                code: code,\r\n                code_system: code_system,\r\n                code_system_name: code_system_name,\r\n                effective_time: parse(time)\r\n            });\r\n        });\r\n    \r\n        return data;\r\n    \r\n        function parse(str) {\r\n            if (!str) return null;\r\n            var y = str.substr(0, 4),\r\n                m = str.substr(4, 2) - 1,\r\n                d = str.substr(6, 2);\r\n            var D = new Date(y, m, d);\r\n            return (D.getFullYear() == y && D.getMonth() == m && D.getDate() == d) ? D : null;\r\n        }\r\n    };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/care_plan.js\n// module id = 34\n// module chunks = 0","/*\r\n * Parser for the CCDA document section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.document = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var data = {}, el;\r\n    \r\n    var doc = ccda.section('document');\r\n  \r\n  \r\n    // Parse Doc Type Info\r\n    var templates =  doc.elsByTag('templateId');\r\n    var rootTemplate = templates[0].attr('root');\r\n    var secondTemplate;\r\n    if(templates.length >1)\r\n      secondTemplate = templates[1].attr('root');\r\n    else\r\n      secondTemplate = rootTemplate;\r\n  \r\n    var loinc = doc.tag('code').attr('code');\r\n    var templateId = doc.tag('templateId').attr('root');\r\n    var displayName = doc.tag('code').attr('displayName');\r\n  \r\n    var nonXml = doc.tag('nonXMLBody');\r\n    var nonXmlNodes = nonXml.el.childNodes;\r\n  \r\n    var bodyType = \"structured\";\r\n    var nonXmlBody = {\r\n      type: \"\",\r\n      mediaType: \"\",\r\n      representation: \"\",\r\n      rawText: \"\",\r\n      reference: \"\"\r\n    };\r\n    if(nonXmlNodes && nonXmlNodes.length > 0) {\r\n      bodyType = \"unstructured\";\r\n      var text = nonXml.tag('text');\r\n      var mediaType = \"\";\r\n      var representation = \"\";\r\n      var rawText = \"\";\r\n      var reference = \"\";\r\n      var type = \"\";\r\n  \r\n      // We have an embedded doc\r\n      if(text && text.attr('mediaType')) {\r\n        mediaType = text.attr('mediaType');\r\n        representation = text.attr('representation');\r\n        rawText = text.val();\r\n        type = \"embedded\";\r\n      }\r\n  \r\n      if(text && !mediaType) {\r\n         reference = text.tag('reference').attr('value');\r\n        type = \"reference\";\r\n      }\r\n      nonXmlBody = {\r\n        type: type,\r\n        mediaType: mediaType,\r\n        representation: representation,\r\n        rawText: rawText,\r\n        reference: reference\r\n      }\r\n    }\r\n  \r\n    var docType = {\r\n      type: \"CCDAR2\",\r\n      rootTemplateId: rootTemplate,\r\n      templateId: secondTemplate,\r\n      displayName: displayName,\r\n      loinc: loinc,\r\n      bodyType: bodyType,\r\n      nonXmlBody: nonXmlBody\r\n    };\r\n  \r\n    var date = parseDate(doc.tag('effectiveTime').attr('value'));\r\n    var title = Core.stripWhitespace(doc.tag('title').val());\r\n    \r\n    var author = doc.tag('author');\r\n    el = author.tag('assignedPerson').tag('name');\r\n    var name_dict = parseName(el);\r\n    \r\n    el = author.tag('addr');\r\n    var address_dict = parseAddress(el);\r\n    \r\n    el = author.tag('telecom');\r\n    var work_phone = el.attr('value');\r\n  \r\n    var documentation_of_list = [];\r\n    var performers = doc.tag('documentationOf').elsByTag('performer');\r\n    for (var i = 0; i < performers.length; i++) {\r\n      el = performers[i];\r\n      var performer_name_dict = parseName(el);\r\n      var performer_phone = el.tag('telecom').attr('value');\r\n      var performer_addr = parseAddress(el.tag('addr'));\r\n      documentation_of_list.push({\r\n        name: performer_name_dict,\r\n        phone: {\r\n          work: performer_phone\r\n        },\r\n        address: performer_addr\r\n      });\r\n    }\r\n  \r\n    el = doc.tag('encompassingEncounter').tag('location');\r\n    var location_name = Core.stripWhitespace(el.tag('name').val());\r\n    var location_addr_dict = parseAddress(el.tag('addr'));\r\n    \r\n    var encounter_date = null;\r\n    el = el.tag('effectiveTime');\r\n    if (!el.isEmpty()) {\r\n      encounter_date = parseDate(el.attr('value'));\r\n    }\r\n    \r\n    data = {\r\n      type: docType,\r\n      date: date,\r\n      title: title,\r\n      author: {\r\n        name: name_dict,\r\n        address: address_dict,\r\n        phone: {\r\n          work: work_phone\r\n        }\r\n      },\r\n      documentation_of: documentation_of_list,\r\n      location: {\r\n        name: location_name,\r\n        address: location_addr_dict,\r\n        encounter_date: encounter_date\r\n      }\r\n    };\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/document.js\n// module id = 35\n// module chunks = 0","/*\r\n * Parser for the CCDA encounters section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.encounters = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var encounters = ccda.section('encounters');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Encounters\";\r\n    data.templateId = encounters.tag('templateId').attr('root');\r\n    data.text = encounters.tag('text').val(true);\r\n    \r\n    encounters.entries().each(function(entry) {\r\n      \r\n      var date = parseDate(entry.tag('effectiveTime').attr('value'));\r\n      \r\n      el = entry.tag('code');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName'),\r\n          code_system_version = el.attr('codeSystemVersion');\r\n      \r\n      // translation\r\n      el = entry.tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // performer\r\n      el = entry.tag('performer').tag('code');\r\n      var performer_name = el.attr('displayName'),\r\n          performer_code = el.attr('code'),\r\n          performer_code_system = el.attr('codeSystem'),\r\n          performer_code_system_name = el.attr('codeSystemName');\r\n    \r\n      // participant => location\r\n      el = entry.tag('participant');\r\n      var organization = el.tag('code').attr('displayName');\r\n      \r\n      var location_dict = parseAddress(el);\r\n      location_dict.organization = organization;\r\n  \r\n      // findings\r\n      var findings = [];\r\n      var findingEls = entry.elsByTag('entryRelationship');\r\n      for (var i = 0; i < findingEls.length; i++) {\r\n        el = findingEls[i].tag('value');\r\n        findings.push({\r\n          name: el.attr('displayName'),\r\n          code: el.attr('code'),\r\n          code_system: el.attr('codeSystem')\r\n        });\r\n      }\r\n      \r\n      data.entries.push({\r\n        date: date,\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name,\r\n        code_system_version: code_system_version,\r\n        findings: findings,\r\n        translation: {\r\n          name: translation_name,\r\n          code: translation_code,\r\n          code_system: translation_code_system,\r\n          code_system_name: translation_code_system_name\r\n        },\r\n        performer: {\r\n          name: performer_name,\r\n          code: performer_code,\r\n          code_system: performer_code_system,\r\n          code_system_name: performer_code_system_name\r\n        },\r\n        location: location_dict\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/encounters.js\n// module id = 36\n// module chunks = 0","/*\r\n * Parser for any freetext section (i.e., contains just a single <text> element)\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function() {\r\n  var self = this;\r\n\r\n  self.free_text = function (ccda, sectionName) {    \r\n    var data = {};\r\n    \r\n    var doc = ccda.section(sectionName);\r\n    var text = Core.stripWhitespace(doc.tag('text').val(true));\r\n    \r\n    data = {\r\n      text: text\r\n    };\r\n\r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/free_text.js\n// module id = 37\n// module chunks = 0","/*\r\n * Parser for the CCDA functional & cognitive status\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.functional_statuses = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var data = [], el;\r\n  \r\n    var statuses = ccda.section('functional_statuses');\r\n  \r\n    statuses.entries().each(function(entry) {\r\n  \r\n      var date = parseDate(entry.tag('effectiveTime').attr('value'));\r\n      if (!date) {\r\n        date = parseDate(entry.tag('effectiveTime').tag('low').attr('value'));\r\n      }\r\n  \r\n      el = entry.tag('value');\r\n  \r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName');\r\n  \r\n      data.push({\r\n        date: date,\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name\r\n      });\r\n    \r\n    });\r\n    \r\n    return data;\r\n  };  \r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/functional_statuses.js\n// module id = 38\n// module chunks = 0","/*\r\n * Parser for the CCDA immunizations section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.immunizations = function (ccda) {    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var administeredData = {}, declinedData = {}, product, el;\r\n  \r\n    var immunizations = ccda.section('immunizations');\r\n  \r\n    administeredData.entries = [];\r\n    administeredData.displayName = \"Immunizations\";\r\n    administeredData.templateId = immunizations.tag('templateId').attr('root');\r\n    administeredData.text = immunizations.tag('text').val(true);\r\n  \r\n    declinedData.entries = [];\r\n    declinedData.displayName = \"Immunizations Declined\";\r\n    declinedData.templateId = immunizations.tag('templateId').attr('root');\r\n    declinedData.text = immunizations.tag('text').val(true);\r\n    \r\n    immunizations.entries().each(function(entry) {\r\n      \r\n      // date\r\n      el = entry.tag('effectiveTime');\r\n      var date = parseDate(el.attr('value'));\r\n      if (!date) {\r\n        date = parseDate(el.tag('low').attr('value'));\r\n      }\r\n  \r\n      // if 'declined' is true, this is a record that this vaccine WASN'T administered\r\n      el = entry.tag('substanceAdministration');\r\n      var declined = el.boolAttr('negationInd');\r\n  \r\n      // product\r\n      product = entry.template('2.16.840.1.113883.10.20.22.4.54');\r\n      el = product.tag('code');\r\n      var product_name = el.attr('displayName'),\r\n          product_code = el.attr('code'),\r\n          product_code_system = el.attr('codeSystem'),\r\n          product_code_system_name = el.attr('codeSystemName');\r\n  \r\n      // translation\r\n      el = product.tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n  \r\n      // misc product details\r\n      el = product.tag('lotNumberText');\r\n      var lot_number = el.val();\r\n  \r\n      el = product.tag('manufacturerOrganization');\r\n      var manufacturer_name = el.tag('name').val();\r\n      \r\n      // route\r\n      el = entry.tag('routeCode');\r\n      var route_name = el.attr('displayName'),\r\n          route_code = el.attr('code'),\r\n          route_code_system = el.attr('codeSystem'),\r\n          route_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // instructions\r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.20');\r\n      var instructions_text = Core.stripWhitespace(el.tag('text').val());\r\n      el = el.tag('code');\r\n      var education_name = el.attr('displayName'),\r\n          education_code = el.attr('code'),\r\n          education_code_system = el.attr('codeSystem');\r\n  \r\n      // dose\r\n      el = entry.tag('doseQuantity');\r\n      var dose_value = el.attr('value'),\r\n          dose_unit = el.attr('unit');\r\n      \r\n      var data = (declined) ? declinedData : administeredData;\r\n      data.entries.push({\r\n        date: date,\r\n        product: {\r\n          name: product_name,\r\n          code: product_code,\r\n          code_system: product_code_system,\r\n          code_system_name: product_code_system_name,\r\n          translation: {\r\n            name: translation_name,\r\n            code: translation_code,\r\n            code_system: translation_code_system,\r\n            code_system_name: translation_code_system_name\r\n          },\r\n          lot_number: lot_number,\r\n          manufacturer_name: manufacturer_name\r\n        },\r\n        dose_quantity: {\r\n          value: dose_value,\r\n          unit: dose_unit\r\n        },\r\n        route: {\r\n          name: route_name,\r\n          code: route_code,\r\n          code_system: route_code_system,\r\n          code_system_name: route_code_system_name\r\n        },\r\n        instructions: instructions_text,\r\n        education_type: {\r\n          name: education_name,\r\n          code: education_code,\r\n          code_system: education_code_system\r\n        }\r\n      });\r\n    });\r\n    \r\n    return {\r\n      administered: administeredData,\r\n      declined: declinedData\r\n    };\r\n  };\r\n}\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/immunizations.js\n// module id = 39\n// module chunks = 0","/*\r\n * Parser for the CCDA \"plan of care\" section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function() {\r\n  var self = this;\r\n  \r\n  self.instructions = function (ccda) {\r\n    \r\n    var data = [], el;\r\n    \r\n    var instructions = ccda.section('instructions');\r\n    data.templateId = instructions.tag('templateId').attr('root');\r\n    \r\n    instructions.entries().each(function(entry) {\r\n  \r\n      el = entry.tag('code');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName');\r\n  \r\n      var text = Core.stripWhitespace(entry.tag('text').val(true));\r\n      \r\n      data.push({\r\n        text: text,\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/instructions.js\n// module id = 40\n// module chunks = 0","/*\r\n * Parser for the CCDA medications section\r\n */\r\n\r\nmodule.exports = function (doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.medications = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var medications = ccda.section('medications');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Medications\";\r\n    data.templateId = medications.tag('templateId').attr('root');\r\n    data.text = medications.tag('text').val(true);\r\n  \r\n    medications.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('text');\r\n      var sig = Core.stripWhitespace(el.val());\r\n  \r\n      var effectiveTimes = entry.elsByTag('effectiveTime');\r\n  \r\n      el = effectiveTimes[0]; // the first effectiveTime is the med start date\r\n      var start_date = null, end_date = null;\r\n      if (el) {\r\n        start_date = parseDate(el.tag('low').attr('value'));\r\n        end_date = parseDate(el.tag('high').attr('value'));\r\n      }\r\n  \r\n      // the second effectiveTime might the schedule period or it might just\r\n      // be a random effectiveTime from further in the entry... xsi:type should tell us\r\n      el = effectiveTimes[1];\r\n      var schedule_type = null, schedule_period_value = null, schedule_period_unit = null;\r\n      if (el && el.attr('xsi:type') === 'PIVL_TS') {\r\n        var institutionSpecified = el.attr('institutionSpecified');\r\n        if (institutionSpecified === 'true') {\r\n          schedule_type= 'frequency';\r\n        } else if (institutionSpecified === 'false') {\r\n          schedule_type = 'interval';\r\n        }\r\n  \r\n        el = el.tag('period');\r\n        schedule_period_value = el.attr('value');\r\n        schedule_period_unit = el.attr('unit');\r\n      }\r\n      \r\n      el = entry.tag('manufacturedProduct').tag('code');\r\n      var product_name = el.attr('displayName'),\r\n          product_code = el.attr('code'),\r\n          product_code_system = el.attr('codeSystem');\r\n  \r\n      var product_original_text = null;\r\n      el = entry.tag('manufacturedProduct').tag('originalText');\r\n      if (!el.isEmpty()) {\r\n        product_original_text = Core.stripWhitespace(el.val());\r\n      }\r\n      // if we don't have a product name yet, try the originalText version\r\n      if (!product_name && product_original_text) {\r\n        product_name = product_original_text;\r\n      }\r\n      \r\n      el = entry.tag('manufacturedProduct').tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n      el = entry.tag('doseQuantity');\r\n      var dose_value = el.attr('value'),\r\n          dose_unit = el.attr('unit');\r\n      \r\n      el = entry.tag('rateQuantity');\r\n      var rate_quantity_value = el.attr('value'),\r\n          rate_quantity_unit = el.attr('unit');\r\n      \r\n      el = entry.tag('precondition').tag('value');\r\n      var precondition_name = el.attr('displayName'),\r\n          precondition_code = el.attr('code'),\r\n          precondition_code_system = el.attr('codeSystem');\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.19').tag('value');\r\n      var reason_name = el.attr('displayName'),\r\n          reason_code = el.attr('code'),\r\n          reason_code_system = el.attr('codeSystem');\r\n      \r\n      el = entry.tag('routeCode');\r\n      var route_name = el.attr('displayName'),\r\n          route_code = el.attr('code'),\r\n          route_code_system = el.attr('codeSystem'),\r\n          route_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // participant/playingEntity => vehicle\r\n      el = entry.tag('participant').tag('playingEntity');\r\n      var vehicle_name = el.tag('name').val();\r\n  \r\n      el = el.tag('code');\r\n      // prefer the code vehicle_name but fall back to the non-coded one\r\n      vehicle_name = el.attr('displayName') || vehicle_name;\r\n      var vehicle_code = el.attr('code'),\r\n          vehicle_code_system = el.attr('codeSystem'),\r\n          vehicle_code_system_name = el.attr('codeSystemName');\r\n      \r\n      el = entry.tag('administrationUnitCode');\r\n      var administration_name = el.attr('displayName'),\r\n          administration_code = el.attr('code'),\r\n          administration_code_system = el.attr('codeSystem'),\r\n          administration_code_system_name = el.attr('codeSystemName');\r\n      \r\n      // performer => prescriber\r\n      el = entry.tag('performer');\r\n      var prescriber_organization = el.tag('name').val(),\r\n          prescriber_person = null;\r\n      \r\n      data.entries.push({\r\n        date_range: {\r\n          start: start_date,\r\n          end: end_date\r\n        },\r\n        text: sig,\r\n        product: {\r\n          name: product_name,\r\n          code: product_code,\r\n          code_system: product_code_system,\r\n          text: product_original_text,\r\n          translation: {\r\n            name: translation_name,\r\n            code: translation_code,\r\n            code_system: translation_code_system,\r\n            code_system_name: translation_code_system_name\r\n          }\r\n        },\r\n        dose_quantity: {\r\n          value: dose_value,\r\n          unit: dose_unit\r\n        },\r\n        rate_quantity: {\r\n          value: rate_quantity_value,\r\n          unit: rate_quantity_unit\r\n        },\r\n        precondition: {\r\n          name: precondition_name,\r\n          code: precondition_code,\r\n          code_system: precondition_code_system\r\n        },\r\n        reason: {\r\n          name: reason_name,\r\n          code: reason_code,\r\n          code_system: reason_code_system\r\n        },\r\n        route: {\r\n          name: route_name,\r\n          code: route_code,\r\n          code_system: route_code_system,\r\n          code_system_name: route_code_system_name\r\n        },\r\n        schedule: {\r\n          type: schedule_type,\r\n          period_value: schedule_period_value,\r\n          period_unit: schedule_period_unit\r\n        },\r\n        vehicle: {\r\n          name: vehicle_name,\r\n          code: vehicle_code,\r\n          code_system: vehicle_code_system,\r\n          code_system_name: vehicle_code_system_name\r\n        },\r\n        administration: {\r\n          name: administration_name,\r\n          code: administration_code,\r\n          code_system: administration_code_system,\r\n          code_system_name: administration_code_system_name\r\n        },\r\n        prescriber: {\r\n          organization: prescriber_organization,\r\n          person: prescriber_person\r\n        }\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/medications.js\n// module id = 41\n// module chunks = 0","/*\r\n * Parser for the CCDA problems section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.problems = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n  \r\n    var problems = ccda.section('problems');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Problems\";\r\n    data.templateId = problems.tag('templateId').attr('root');\r\n    data.text = problems.tag('text').val(true);\r\n    \r\n    problems.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var start_date = parseDate(el.tag('low').attr('value')),\r\n          end_date = parseDate(el.tag('high').attr('value'));\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.4').tag('value');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem'),\r\n          code_system_name = el.attr('codeSystemName');\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.4').tag('translation');\r\n      var translation_name = el.attr('displayName'),\r\n        translation_code = el.attr('code'),\r\n        translation_code_system = el.attr('codeSystem'),\r\n        translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.6');\r\n      var status = el.tag('value').attr('displayName');\r\n      \r\n      var age = null;\r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.31');\r\n      if (!el.isEmpty()) {\r\n        age = parseFloat(el.tag('value').attr('value'));\r\n      }\r\n  \r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.64');\r\n      var comment = Core.stripWhitespace(el.tag('text').val());\r\n      \r\n      data.entries.push({\r\n        date_range: {\r\n          start: start_date,\r\n          end: end_date\r\n        },\r\n        name: name,\r\n        status: status,\r\n        age: age,\r\n        code: code,\r\n        code_system: code_system,\r\n        code_system_name: code_system_name,\r\n        translation: {\r\n          name: translation_name,\r\n          code: translation_code,\r\n          code_system: translation_code_system,\r\n          code_system_name: translation_code_system_name\r\n        },\r\n        comment: comment\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/problems.js\n// module id = 42\n// module chunks = 0","/*\r\n * Parser for the CCDA procedures section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.procedures = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var procedures = ccda.section('procedures');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Procedures\";\r\n    data.templateId = procedures.tag('templateId').attr('root');\r\n    data.text = procedures.tag('text').val(true);\r\n    \r\n    procedures.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var date = parseDate(el.attr('value'));\r\n      \r\n      el = entry.tag('code');\r\n      var name = el.attr('displayName'),\r\n          code = el.attr('code'),\r\n          code_system = el.attr('codeSystem');\r\n  \r\n      if (!name) {\r\n        name = Core.stripWhitespace(entry.tag('originalText').val());\r\n      }\r\n      \r\n      // 'specimen' tag not always present\r\n      el = entry.tag('specimen').tag('code');\r\n      var specimen_name = el.attr('displayName'),\r\n          specimen_code = el.attr('code'),\r\n          specimen_code_system = el.attr('codeSystem');\r\n      \r\n      el = entry.tag('performer').tag('addr');\r\n      var organization = el.tag('name').val(),\r\n          phone = el.tag('telecom').attr('value');\r\n      \r\n      var performer_dict = parseAddress(el);\r\n      performer_dict.organization = organization;\r\n      performer_dict.phone = phone;\r\n      \r\n      // participant => device\r\n      el = entry.template('2.16.840.1.113883.10.20.22.4.37').tag('code');\r\n      var device_name = el.attr('displayName'),\r\n          device_code = el.attr('code'),\r\n          device_code_system = el.attr('codeSystem');\r\n      \r\n      data.entries.push({\r\n        date: date,\r\n        name: name,\r\n        code: code,\r\n        code_system: code_system,\r\n        specimen: {\r\n          name: specimen_name,\r\n          code: specimen_code,\r\n          code_system: specimen_code_system\r\n        },\r\n        performer: performer_dict,\r\n        device: {\r\n          name: device_name,\r\n          code: device_code,\r\n          code_system: device_code_system\r\n        }\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/procedures.js\n// module id = 43\n// module chunks = 0","/*\r\n * Parser for the CCDA results (labs) section\r\n */\r\n\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.results = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var results = ccda.section('results');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Results\";\r\n    data.templateId = results.tag('templateId').attr('root');\r\n    data.text = results.tag('text').val(true);\r\n    \r\n    results.entries().each(function(entry) {\r\n      \r\n      // panel\r\n      el = entry.tag('code');\r\n      var panel_name = el.attr('displayName'),\r\n          panel_code = el.attr('code'),\r\n          panel_code_system = el.attr('codeSystem'),\r\n          panel_code_system_name = el.attr('codeSystemName');\r\n      \r\n      var observation;\r\n      var tests = entry.elsByTag('observation');\r\n      var tests_data = [];\r\n      \r\n      for (var i = 0; i < tests.length; i++) {\r\n        observation = tests[i];\r\n        \r\n        var date = parseDate(observation.tag('effectiveTime').attr('value'));\r\n        \r\n        el = observation.tag('code');\r\n        var name = el.attr('displayName'),\r\n            code = el.attr('code'),\r\n            code_system = el.attr('codeSystem'),\r\n            code_system_name = el.attr('codeSystemName');\r\n  \r\n        if (!name) {\r\n          name = Core.stripWhitespace(observation.tag('text').val());\r\n        }\r\n        \r\n        el = observation.tag('translation');\r\n        var translation_name = el.attr('displayName'),\r\n          translation_code = el.attr('code'),\r\n          translation_code_system = el.attr('codeSystem'),\r\n          translation_code_system_name = el.attr('codeSystemName');\r\n      \r\n        el = observation.tag('value');\r\n        var value = el.attr('value'),\r\n            unit = el.attr('unit');\r\n        // We could look for xsi:type=\"PQ\" (physical quantity) but it seems better\r\n        // not to trust that that field has been used correctly...\r\n        if (value && !isNaN(parseFloat(value))) {\r\n          value = parseFloat(value);\r\n        }\r\n        if (!value) {\r\n          value = el.val(); // look for free-text values\r\n        }\r\n        \r\n        el = observation.tag('referenceRange');\r\n        var reference_range_text = Core.stripWhitespace(el.tag('observationRange').tag('text').val()),\r\n            reference_range_low_unit = el.tag('observationRange').tag('low').attr('unit'),\r\n            reference_range_low_value = el.tag('observationRange').tag('low').attr('value'),\r\n            reference_range_high_unit = el.tag('observationRange').tag('high').attr('unit'),\r\n            reference_range_high_value = el.tag('observationRange').tag('high').attr('value');\r\n        \r\n        tests_data.push({\r\n          date: date,\r\n          name: name,\r\n          value: value,\r\n          unit: unit,\r\n          code: code,\r\n          code_system: code_system,\r\n          code_system_name: code_system_name,\r\n          translation: {\r\n            name: translation_name,\r\n            code: translation_code,\r\n            code_system: translation_code_system,\r\n            code_system_name: translation_code_system_name\r\n          },\r\n          reference_range: {\r\n            text: reference_range_text,\r\n            low_unit: reference_range_low_unit,\r\n            low_value: reference_range_low_value,\r\n            high_unit: reference_range_high_unit,\r\n            high_value: reference_range_high_value,\r\n          }\r\n        });\r\n      }\r\n      \r\n      data.entries.push({\r\n        name: panel_name,\r\n        code: panel_code,\r\n        code_system: panel_code_system,\r\n        code_system_name: panel_code_system_name,\r\n        tests: tests_data\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/results.js\n// module id = 44\n// module chunks = 0","/*\r\n * Parser for the CCDA smoking status in social history section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.smoking_status = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var data, el;\r\n  \r\n    var name = null,\r\n        code = null,\r\n        code_system = null,\r\n        code_system_name = null,\r\n        entry_date = null;\r\n  \r\n    // We can parse all of the social_history sections,\r\n    // but in practice, this section seems to be used for\r\n    // smoking status, so we're just going to break that out.\r\n    // And we're just looking for the first non-empty one.\r\n    var social_history = ccda.section('social_history');\r\n    var entries = social_history.entries();\r\n    for (var i=0; i < entries.length; i++) {\r\n      var entry = entries[i];\r\n  \r\n      var smoking_status = entry.template('2.16.840.1.113883.10.20.22.4.78');\r\n      if (smoking_status.isEmpty()) {\r\n        smoking_status = entry.template('2.16.840.1.113883.10.22.4.78');\r\n      }\r\n      if (smoking_status.isEmpty()) {\r\n        continue;\r\n      }\r\n  \r\n      el = smoking_status.tag('effectiveTime');\r\n      entry_date = parseDate(el.attr('value'));\r\n  \r\n      el = smoking_status.tag('value');\r\n      name = el.attr('displayName');\r\n      code = el.attr('code');\r\n      code_system = el.attr('codeSystem');\r\n      code_system_name = el.attr('codeSystemName');\r\n  \r\n      if (name) {\r\n        break;\r\n      }\r\n    }\r\n  \r\n    data = {\r\n      date: entry_date,\r\n      name: name,\r\n      code: code,\r\n      code_system: code_system,\r\n      code_system_name: code_system_name\r\n    };\r\n    \r\n    return data;\r\n  };  \r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/smoking_status.js\n// module id = 45\n// module chunks = 0","/*\r\n * Parser for the CCDA vitals section\r\n */\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.vitals = function (ccda) {\r\n    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var vitals = ccda.section('vitals');\r\n  \r\n    var data = {}, el;\r\n    data.entries = [];\r\n    data.displayName = \"Vitals\";\r\n    data.templateId = vitals.tag('templateId').attr('root');\r\n    data.text = vitals.tag('text').val(true);\r\n  \r\n    vitals.entries().each(function(entry) {\r\n      \r\n      el = entry.tag('effectiveTime');\r\n      var entry_date = parseDate(el.attr('value'));\r\n      \r\n      var result;\r\n      var results = entry.elsByTag('component');\r\n      var results_data = [];\r\n      \r\n      for (var i = 0; i < results.length; i++) {\r\n        result = results[i];\r\n        \r\n        el = result.tag('code');\r\n        var name = el.attr('displayName'),\r\n            code = el.attr('code'),\r\n            code_system = el.attr('codeSystem'),\r\n            code_system_name = el.attr('codeSystemName');\r\n        \r\n        el = result.tag('value');\r\n        var value = parseFloat(el.attr('value')),\r\n            unit = el.attr('unit');\r\n        \r\n        results_data.push({\r\n          name: name,\r\n          code: code,\r\n          code_system: code_system,\r\n          code_system_name: code_system_name,\r\n          value: value,\r\n          unit: unit\r\n        });\r\n      }\r\n      \r\n      data.entries.push({\r\n        date: entry_date,\r\n        results: results_data\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccda/vitals.js\n// module id = 46\n// module chunks = 0","/*\r\n * Parser for the CCDAR2 document\r\n */\r\n\r\nvar ParseGenericInfo = require('./generic');\r\nvar Core = require('../core');\r\n\r\nvar DocumentParser = require('./ccdar2/document');\r\nvar DemographicsParser = require('./ccda/demographics');\r\nvar HealthConcernsParser = require('./ccdar2/health_concerns');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n  self.documentParser = new DocumentParser(self.doc);\r\n  self.demographicsParser = new DemographicsParser(self.doc);\r\n  self.healthConcernsParser = new HealthConcernsParser(self.doc);\r\n\r\n  self.run = function (ccda) {    \r\n      var data = {};\r\n  \r\n      data.document              = self.documentParser.document(ccda);\r\n      data.demographics          = self.demographicsParser.demographics(ccda);\r\n      data.health_concerns_document  = self.healthConcernsParser.health_concerns_document(ccda);\r\n      data.json                  = Core.json;\r\n  \r\n      // Decorate each section with Title, templateId and text and adds missing sections\r\n      ParseGenericInfo(ccda, data);\r\n  \r\n      return data;\r\n    };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccdar2.js\n// module id = 47\n// module chunks = 0","/*\r\n * Parser for the CCDAR2 document section\r\n */\r\nvar Core = require('../../core');\r\n\r\nmodule.exports = function(doc) {\r\n  var self = this;\r\n  self.doc = doc;\r\n\r\n  self.document = function (ccda) {    \r\n    var parseDate = self.doc.parseDate;\r\n    var parseName = self.doc.parseName;\r\n    var parseAddress = self.doc.parseAddress;\r\n    var data = {}, el;\r\n  \r\n    var doc = ccda.section('document');\r\n    var date = parseDate(doc.tag('effectiveTime').attr('value'));\r\n    var title = Core.stripWhitespace(doc.tag('title').val());\r\n  \r\n    // Parse Doc Type Info\r\n    var templates =  doc.elsByTag('templateId');\r\n  \r\n    var rootTemplate = templates[0].attr('root');\r\n    var secondTemplate;\r\n    if(templates.length >1)\r\n      secondTemplate = templates[1].attr('root');\r\n    else\r\n      secondTemplate = rootTemplate;\r\n  \r\n    var loinc = doc.tag('code').attr('code');\r\n    var templateId = doc.tag('templateId').attr('root');\r\n    var displayName = doc.tag('code').attr('displayName');\r\n  \r\n    var nonXml = doc.tag('nonXMLBody');\r\n    var nonXmlNodes = nonXml.el.childNodes;\r\n  \r\n    var bodyType = \"structured\";\r\n    var nonXmlBody = {\r\n      type: \"\",\r\n      mediaType: \"\",\r\n      representation: \"\",\r\n      rawText: \"\",\r\n      reference: \"\"\r\n    };\r\n    if(nonXmlNodes && nonXmlNodes.length > 0) {\r\n      bodyType = \"unstructured\";\r\n      var text = nonXml.tag('text');\r\n      var mediaType = \"\";\r\n      var representation = \"\";\r\n      var rawText = \"\";\r\n      var reference = \"\";\r\n      var type = \"\";\r\n  \r\n      // We have an embedded doc\r\n      if(text && text.attr('mediaType')) {\r\n        mediaType = text.attr('mediaType');\r\n        representation = text.attr('representation');\r\n        rawText = text.val();\r\n        type = \"embedded\";\r\n      }\r\n  \r\n      if(text && !mediaType) {\r\n        reference = text.tag('reference').attr('value');\r\n        type = \"reference\";\r\n      }\r\n      nonXmlBody = {\r\n        type: type,\r\n        mediaType: mediaType,\r\n        representation: representation,\r\n        rawText: rawText,\r\n        reference: reference\r\n      }\r\n    }\r\n  \r\n    var docType = {\r\n      type: \"CCDAR2\",\r\n      rootTemplateId: rootTemplate,\r\n      templateId: secondTemplate,\r\n      displayName: displayName,\r\n      loinc: loinc,\r\n      bodyType: bodyType,\r\n      nonXmlBody: nonXmlBody\r\n    };\r\n  \r\n    var author = doc.tag('author');\r\n    el = author.tag('assignedPerson').tag('name');\r\n    var name_dict = parseName(el);\r\n  \r\n    el = author.tag('addr');\r\n    var address_dict = parseAddress(el);\r\n  \r\n    el = author.tag('telecom');\r\n    var work_phone = el.attr('value');\r\n  \r\n    var documentation_of_list = [];\r\n    var performers = doc.tag('documentationOf').elsByTag('performer');\r\n    for (var i = 0; i < performers.length; i++) {\r\n      el = performers[i];\r\n      var performer_name_dict = parseName(el);\r\n      var performer_phone = el.tag('telecom').attr('value');\r\n      var performer_addr = parseAddress(el.tag('addr'));\r\n      documentation_of_list.push({\r\n        name: performer_name_dict,\r\n        phone: {\r\n          work: performer_phone\r\n        },\r\n        address: performer_addr\r\n      });\r\n    }\r\n  \r\n    el = doc.tag('encompassingEncounter').tag('location');\r\n    var location_name = Core.stripWhitespace(el.tag('name').val());\r\n    var location_addr_dict = parseAddress(el.tag('addr'));\r\n  \r\n    var encounter_date = null;\r\n    el = el.tag('effectiveTime');\r\n    if (!el.isEmpty()) {\r\n      encounter_date = parseDate(el.attr('value'));\r\n    }\r\n  \r\n    data = {\r\n      type: docType,\r\n      date: date,\r\n      title: title,\r\n      author: {\r\n        name: name_dict,\r\n        address: address_dict,\r\n        phone: {\r\n          work: work_phone\r\n        }\r\n      },\r\n      documentation_of: documentation_of_list,\r\n      location: {\r\n        name: location_name,\r\n        address: location_addr_dict,\r\n        encounter_date: encounter_date\r\n      }\r\n    };\r\n  \r\n    return data;\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/parsers/ccdar2/document.js\n// module id = 48\n// module chunks = 0"],"sourceRoot":""}